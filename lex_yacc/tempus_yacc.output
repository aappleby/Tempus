Grammar

    0 $accept: program $end

    1 program: section
    2        | section program

    3 section: marker expr_block

    4 marker: '#' TOK_IDENT

    5 const: TOK_INT
    6      | TOK_FLOAT
    7      | TOK_STRING

    8 ident: '@' TOK_IDENT
    9      | TOK_IDENT

   10 parens: '(' expr_tuple ')'

   11 braces: '{' expr_block '}'

   12 bracks: '[' expr_tuple ']'

   13 delimited: parens
   14          | braces
   15          | bracks

   16 expr_atom: ident
   17          | parens
   18          | braces
   19          | bracks

   20 atom_link: expr_atom
   21          | '.' expr_atom

   22 atom_chain: atom_link
   23           | atom_link atom_chain

   24 lhs_expr: atom_chain

   25 type_expr: atom_chain

   26 op_type: OP_TYPE
   27        | ':'

   28 op_bin: OP_BIN
   29       | '+'
   30       | '-'

   31 prefix: OP_AFFIX
   32       | '+'
   33       | '-'

   34 suffix: OP_AFFIX

   35 prefix_chain: atom_chain
   36             | prefix prefix_chain

   37 affix_chain: prefix_chain
   38            | affix_chain suffix

   39 rhs_expr: affix_chain expr_tail
   40         | const expr_tail

   41 expr_tail: op_bin rhs_expr
   42          | ε

   43 full_decl: lhs_expr op_type type_expr OP_ASSIGN rhs_expr

   44 empty_decl: lhs_expr op_type type_expr

   45 assignment: lhs_expr OP_ASSIGN rhs_expr

   46 typed_val: op_type type_expr OP_ASSIGN rhs_expr

   47 bare_name: lhs_expr op_type

   48 bare_type: op_type type_expr

   49 bare_val: OP_ASSIGN rhs_expr

   50 bare_expr: rhs_expr

   51 stmt_if: KW_IF parens delimited
   52        | KW_IF parens delimited else_chain

   53 else_chain: KW_ELSE delimited
   54           | KW_ELSE stmt_if

   55 stmt_case: KW_CASE parens expr

   56 case_block: stmt_case
   57           | stmt_case case_block

   58 stmt_match: KW_MATCH parens '{' case_block '}'

   59 stmt_for: KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr

   60 expr: full_decl
   61     | empty_decl
   62     | assignment
   63     | typed_val
   64     | bare_name
   65     | bare_type
   66     | bare_val
   67     | bare_expr
   68     | stmt_if
   69     | stmt_match
   70     | stmt_for

   71 opt_expr: expr
   72         | ε

   73 expr_block: ε
   74           | expr
   75           | expr ';' expr_block

   76 expr_tuple: ε
   77           | expr
   78           | expr ',' expr_tuple


Terminals, with rules where they appear

    $end (0) 0
    '#' (35) 4
    '(' (40) 10 59
    ')' (41) 10 59
    '+' (43) 29 32
    ',' (44) 78
    '-' (45) 30 33
    '.' (46) 21
    ':' (58) 27
    ';' (59) 59 75
    '@' (64) 8
    '[' (91) 12
    ']' (93) 12
    '{' (123) 11 58
    '}' (125) 11 58
    error (256)
    TOK_IDENT <val_str> (258) 4 8 9
    TOK_INT <val_int> (259) 5
    TOK_FLOAT <val_float> (260) 6
    TOK_STRING <val_str> (261) 7
    OP_TYPE <val_str> (262) 26
    OP_ASSIGN <val_str> (263) 43 45 46 49
    OP_BIN <val_str> (264) 28
    OP_AFFIX <val_str> (265) 31 34
    KW_IF (266) 51 52
    KW_ELSE (267) 53 54
    KW_MATCH (268) 58
    KW_CASE (269) 55
    KW_FOR (270) 59


Nonterminals, with rules where they appear

    $accept (30)
        on left: 0
    program (31)
        on left: 1 2
        on right: 0 2
    section (32)
        on left: 3
        on right: 1 2
    marker (33)
        on left: 4
        on right: 3
    const (34)
        on left: 5 6 7
        on right: 40
    ident (35)
        on left: 8 9
        on right: 16
    parens (36)
        on left: 10
        on right: 13 17 51 52 55 58
    braces (37)
        on left: 11
        on right: 14 18
    bracks (38)
        on left: 12
        on right: 15 19
    delimited (39)
        on left: 13 14 15
        on right: 51 52 53
    expr_atom (40)
        on left: 16 17 18 19
        on right: 20 21
    atom_link (41)
        on left: 20 21
        on right: 22 23
    atom_chain (42)
        on left: 22 23
        on right: 23 24 25 35
    lhs_expr (43)
        on left: 24
        on right: 43 44 45 47
    type_expr (44)
        on left: 25
        on right: 43 44 46 48
    op_type (45)
        on left: 26 27
        on right: 43 44 46 47 48
    op_bin (46)
        on left: 28 29 30
        on right: 41
    prefix (47)
        on left: 31 32 33
        on right: 36
    suffix (48)
        on left: 34
        on right: 38
    prefix_chain (49)
        on left: 35 36
        on right: 36 37
    affix_chain (50)
        on left: 37 38
        on right: 38 39
    rhs_expr (51)
        on left: 39 40
        on right: 41 43 45 46 49 50
    expr_tail (52)
        on left: 41 42
        on right: 39 40
    full_decl (53)
        on left: 43
        on right: 60
    empty_decl (54)
        on left: 44
        on right: 61
    assignment (55)
        on left: 45
        on right: 62
    typed_val (56)
        on left: 46
        on right: 63
    bare_name (57)
        on left: 47
        on right: 64
    bare_type (58)
        on left: 48
        on right: 65
    bare_val (59)
        on left: 49
        on right: 66
    bare_expr (60)
        on left: 50
        on right: 67
    stmt_if (61)
        on left: 51 52
        on right: 54 68
    else_chain (62)
        on left: 53 54
        on right: 52
    stmt_case (63)
        on left: 55
        on right: 56 57
    case_block (64)
        on left: 56 57
        on right: 57 58
    stmt_match (65)
        on left: 58
        on right: 69
    stmt_for (66)
        on left: 59
        on right: 70
    expr (67)
        on left: 60 61 62 63 64 65 66 67 68 69 70
        on right: 55 59 71 74 75 77 78
    opt_expr (68)
        on left: 71 72
        on right: 59
    expr_block (69)
        on left: 73 74 75
        on right: 3 11 75
    expr_tuple (70)
        on left: 76 77 78
        on right: 10 12 78


State 0

    0 $accept: • program $end
    1 program: • section
    2        | • section program
    3 section: • marker expr_block
    4 marker: • '#' TOK_IDENT

    '#'  shift, and go to state 1

    program  go to state 2
    section  go to state 3
    marker   go to state 4


State 1

    4 marker: '#' • TOK_IDENT

    TOK_IDENT  shift, and go to state 5


State 2

    0 $accept: program • $end

    $end  shift, and go to state 6


State 3

    1 program: • section
    1        | section •  [$end]
    2        | • section program
    2        | section • program
    3 section: • marker expr_block
    4 marker: • '#' TOK_IDENT

    '#'  shift, and go to state 1

    $default  reduce using rule 1 (program)

    program  go to state 7
    section  go to state 3
    marker   go to state 4


State 4

    3 section: marker • expr_block
    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   26 op_type: • OP_TYPE
   27        | • ':'
   31 prefix: • OP_AFFIX
   32       | • '+'
   33       | • '-'
   35 prefix_chain: • atom_chain
   36             | • prefix prefix_chain
   37 affix_chain: • prefix_chain
   38            | • affix_chain suffix
   39 rhs_expr: • affix_chain expr_tail
   40         | • const expr_tail
   43 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   44 empty_decl: • lhs_expr op_type type_expr
   45 assignment: • lhs_expr OP_ASSIGN rhs_expr
   46 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   47 bare_name: • lhs_expr op_type
   48 bare_type: • op_type type_expr
   49 bare_val: • OP_ASSIGN rhs_expr
   50 bare_expr: • rhs_expr
   51 stmt_if: • KW_IF parens delimited
   52        | • KW_IF parens delimited else_chain
   58 stmt_match: • KW_MATCH parens '{' case_block '}'
   59 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   60 expr: • full_decl
   61     | • empty_decl
   62     | • assignment
   63     | • typed_val
   64     | • bare_name
   65     | • bare_type
   66     | • bare_val
   67     | • bare_expr
   68     | • stmt_if
   69     | • stmt_match
   70     | • stmt_for
   73 expr_block: ε •  [$end, '#']
   74           | • expr
   75           | • expr ';' expr_block

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    $default  reduce using rule 73 (expr_block)

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 51
    expr_block    go to state 52


State 5

    4 marker: '#' TOK_IDENT •

    $default  reduce using rule 4 (marker)


State 6

    0 $accept: program $end •

    $default  accept


State 7

    2 program: section program •

    $default  reduce using rule 2 (program)


State 8

    9 ident: TOK_IDENT •

    $default  reduce using rule 9 (ident)


State 9

    5 const: TOK_INT •

    $default  reduce using rule 5 (const)


State 10

    6 const: TOK_FLOAT •

    $default  reduce using rule 6 (const)


State 11

    7 const: TOK_STRING •

    $default  reduce using rule 7 (const)


State 12

   26 op_type: OP_TYPE •

    $default  reduce using rule 26 (op_type)


State 13

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   31 prefix: • OP_AFFIX
   32       | • '+'
   33       | • '-'
   35 prefix_chain: • atom_chain
   36             | • prefix prefix_chain
   37 affix_chain: • prefix_chain
   38            | • affix_chain suffix
   39 rhs_expr: • affix_chain expr_tail
   40         | • const expr_tail
   49 bare_val: OP_ASSIGN • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 53
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 54


State 14

   31 prefix: OP_AFFIX •

    $default  reduce using rule 31 (prefix)


State 15

   10 parens: • '(' expr_tuple ')'
   51 stmt_if: KW_IF • parens delimited
   52        | KW_IF • parens delimited else_chain

    '('  shift, and go to state 19

    parens  go to state 55


State 16

   10 parens: • '(' expr_tuple ')'
   58 stmt_match: KW_MATCH • parens '{' case_block '}'

    '('  shift, and go to state 19

    parens  go to state 56


State 17

   59 stmt_for: KW_FOR • '(' opt_expr ';' opt_expr ';' opt_expr ')' expr

    '('  shift, and go to state 57


State 18

    8 ident: '@' • TOK_IDENT

    TOK_IDENT  shift, and go to state 58


State 19

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   10       | '(' • expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   26 op_type: • OP_TYPE
   27        | • ':'
   31 prefix: • OP_AFFIX
   32       | • '+'
   33       | • '-'
   35 prefix_chain: • atom_chain
   36             | • prefix prefix_chain
   37 affix_chain: • prefix_chain
   38            | • affix_chain suffix
   39 rhs_expr: • affix_chain expr_tail
   40         | • const expr_tail
   43 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   44 empty_decl: • lhs_expr op_type type_expr
   45 assignment: • lhs_expr OP_ASSIGN rhs_expr
   46 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   47 bare_name: • lhs_expr op_type
   48 bare_type: • op_type type_expr
   49 bare_val: • OP_ASSIGN rhs_expr
   50 bare_expr: • rhs_expr
   51 stmt_if: • KW_IF parens delimited
   52        | • KW_IF parens delimited else_chain
   58 stmt_match: • KW_MATCH parens '{' case_block '}'
   59 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   60 expr: • full_decl
   61     | • empty_decl
   62     | • assignment
   63     | • typed_val
   64     | • bare_name
   65     | • bare_type
   66     | • bare_val
   67     | • bare_expr
   68     | • stmt_if
   69     | • stmt_match
   70     | • stmt_for
   76 expr_tuple: ε •  [')']
   77           | • expr
   78           | • expr ',' expr_tuple

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    $default  reduce using rule 76 (expr_tuple)

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 59
    expr_tuple    go to state 60


State 20

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   11       | '{' • expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   26 op_type: • OP_TYPE
   27        | • ':'
   31 prefix: • OP_AFFIX
   32       | • '+'
   33       | • '-'
   35 prefix_chain: • atom_chain
   36             | • prefix prefix_chain
   37 affix_chain: • prefix_chain
   38            | • affix_chain suffix
   39 rhs_expr: • affix_chain expr_tail
   40         | • const expr_tail
   43 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   44 empty_decl: • lhs_expr op_type type_expr
   45 assignment: • lhs_expr OP_ASSIGN rhs_expr
   46 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   47 bare_name: • lhs_expr op_type
   48 bare_type: • op_type type_expr
   49 bare_val: • OP_ASSIGN rhs_expr
   50 bare_expr: • rhs_expr
   51 stmt_if: • KW_IF parens delimited
   52        | • KW_IF parens delimited else_chain
   58 stmt_match: • KW_MATCH parens '{' case_block '}'
   59 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   60 expr: • full_decl
   61     | • empty_decl
   62     | • assignment
   63     | • typed_val
   64     | • bare_name
   65     | • bare_type
   66     | • bare_val
   67     | • bare_expr
   68     | • stmt_if
   69     | • stmt_match
   70     | • stmt_for
   73 expr_block: ε •  ['}']
   74           | • expr
   75           | • expr ';' expr_block

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    $default  reduce using rule 73 (expr_block)

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 51
    expr_block    go to state 61


State 21

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   12       | '[' • expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   26 op_type: • OP_TYPE
   27        | • ':'
   31 prefix: • OP_AFFIX
   32       | • '+'
   33       | • '-'
   35 prefix_chain: • atom_chain
   36             | • prefix prefix_chain
   37 affix_chain: • prefix_chain
   38            | • affix_chain suffix
   39 rhs_expr: • affix_chain expr_tail
   40         | • const expr_tail
   43 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   44 empty_decl: • lhs_expr op_type type_expr
   45 assignment: • lhs_expr OP_ASSIGN rhs_expr
   46 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   47 bare_name: • lhs_expr op_type
   48 bare_type: • op_type type_expr
   49 bare_val: • OP_ASSIGN rhs_expr
   50 bare_expr: • rhs_expr
   51 stmt_if: • KW_IF parens delimited
   52        | • KW_IF parens delimited else_chain
   58 stmt_match: • KW_MATCH parens '{' case_block '}'
   59 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   60 expr: • full_decl
   61     | • empty_decl
   62     | • assignment
   63     | • typed_val
   64     | • bare_name
   65     | • bare_type
   66     | • bare_val
   67     | • bare_expr
   68     | • stmt_if
   69     | • stmt_match
   70     | • stmt_for
   76 expr_tuple: ε •  [']']
   77           | • expr
   78           | • expr ',' expr_tuple

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    $default  reduce using rule 76 (expr_tuple)

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 59
    expr_tuple    go to state 62


State 22

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   21 atom_link: '.' • expr_atom

    TOK_IDENT  shift, and go to state 8
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21

    ident      go to state 27
    parens     go to state 28
    braces     go to state 29
    bracks     go to state 30
    expr_atom  go to state 63


State 23

   27 op_type: ':' •

    $default  reduce using rule 27 (op_type)


State 24

   32 prefix: '+' •

    $default  reduce using rule 32 (prefix)


State 25

   33 prefix: '-' •

    $default  reduce using rule 33 (prefix)


State 26

   28 op_bin: • OP_BIN
   29       | • '+'
   30       | • '-'
   40 rhs_expr: const • expr_tail
   41 expr_tail: • op_bin rhs_expr
   42          | ε •  [$end, KW_CASE, '#', ')', '}', ']', ';', ',']

    OP_BIN  shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66

    $default  reduce using rule 42 (expr_tail)

    op_bin     go to state 67
    expr_tail  go to state 68


State 27

   16 expr_atom: ident •

    $default  reduce using rule 16 (expr_atom)


State 28

   17 expr_atom: parens •

    $default  reduce using rule 17 (expr_atom)


State 29

   18 expr_atom: braces •

    $default  reduce using rule 18 (expr_atom)


State 30

   19 expr_atom: bracks •

    $default  reduce using rule 19 (expr_atom)


State 31

   20 atom_link: expr_atom •

    $default  reduce using rule 20 (atom_link)


State 32

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   22           | atom_link •  [$end, OP_TYPE, OP_ASSIGN, OP_BIN, OP_AFFIX, KW_CASE, '#', ')', '}', ']', ':', '+', '-', ';', ',']
   23           | • atom_link atom_chain
   23           | atom_link • atom_chain

    TOK_IDENT  shift, and go to state 8
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21
    '.'        shift, and go to state 22

    $default  reduce using rule 22 (atom_chain)

    ident       go to state 27
    parens      go to state 28
    braces      go to state 29
    bracks      go to state 30
    expr_atom   go to state 31
    atom_link   go to state 32
    atom_chain  go to state 69


State 33

   24 lhs_expr: atom_chain •  [OP_TYPE, OP_ASSIGN, ':']
   35 prefix_chain: atom_chain •  [$end, OP_BIN, OP_AFFIX, KW_CASE, '#', ')', '}', ']', '+', '-', ';', ',']

    OP_TYPE    reduce using rule 24 (lhs_expr)
    OP_ASSIGN  reduce using rule 24 (lhs_expr)
    ':'        reduce using rule 24 (lhs_expr)
    $default   reduce using rule 35 (prefix_chain)


State 34

   26 op_type: • OP_TYPE
   27        | • ':'
   43 full_decl: lhs_expr • op_type type_expr OP_ASSIGN rhs_expr
   44 empty_decl: lhs_expr • op_type type_expr
   45 assignment: lhs_expr • OP_ASSIGN rhs_expr
   47 bare_name: lhs_expr • op_type

    OP_TYPE    shift, and go to state 12
    OP_ASSIGN  shift, and go to state 70
    ':'        shift, and go to state 23

    op_type  go to state 71


State 35

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   25 type_expr: • atom_chain
   46 typed_val: op_type • type_expr OP_ASSIGN rhs_expr
   48 bare_type: op_type • type_expr

    TOK_IDENT  shift, and go to state 8
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21
    '.'        shift, and go to state 22

    ident       go to state 27
    parens      go to state 28
    braces      go to state 29
    bracks      go to state 30
    expr_atom   go to state 31
    atom_link   go to state 32
    atom_chain  go to state 72
    type_expr   go to state 73


State 36

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   31 prefix: • OP_AFFIX
   32       | • '+'
   33       | • '-'
   35 prefix_chain: • atom_chain
   36             | • prefix prefix_chain
   36             | prefix • prefix_chain

    TOK_IDENT  shift, and go to state 8
    OP_AFFIX   shift, and go to state 14
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21
    '.'        shift, and go to state 22
    '+'        shift, and go to state 24
    '-'        shift, and go to state 25

    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 53
    prefix        go to state 36
    prefix_chain  go to state 74


State 37

   37 affix_chain: prefix_chain •

    $default  reduce using rule 37 (affix_chain)


State 38

   28 op_bin: • OP_BIN
   29       | • '+'
   30       | • '-'
   34 suffix: • OP_AFFIX
   38 affix_chain: affix_chain • suffix
   39 rhs_expr: affix_chain • expr_tail
   41 expr_tail: • op_bin rhs_expr
   42          | ε •  [$end, KW_CASE, '#', ')', '}', ']', ';', ',']

    OP_BIN    shift, and go to state 64
    OP_AFFIX  shift, and go to state 75
    '+'       shift, and go to state 65
    '-'       shift, and go to state 66

    $default  reduce using rule 42 (expr_tail)

    op_bin     go to state 67
    suffix     go to state 76
    expr_tail  go to state 77


State 39

   50 bare_expr: rhs_expr •

    $default  reduce using rule 50 (bare_expr)


State 40

   60 expr: full_decl •

    $default  reduce using rule 60 (expr)


State 41

   61 expr: empty_decl •

    $default  reduce using rule 61 (expr)


State 42

   62 expr: assignment •

    $default  reduce using rule 62 (expr)


State 43

   63 expr: typed_val •

    $default  reduce using rule 63 (expr)


State 44

   64 expr: bare_name •

    $default  reduce using rule 64 (expr)


State 45

   65 expr: bare_type •

    $default  reduce using rule 65 (expr)


State 46

   66 expr: bare_val •

    $default  reduce using rule 66 (expr)


State 47

   67 expr: bare_expr •

    $default  reduce using rule 67 (expr)


State 48

   68 expr: stmt_if •

    $default  reduce using rule 68 (expr)


State 49

   69 expr: stmt_match •

    $default  reduce using rule 69 (expr)


State 50

   70 expr: stmt_for •

    $default  reduce using rule 70 (expr)


State 51

   74 expr_block: expr •  [$end, '#', '}']
   75           | expr • ';' expr_block

    ';'  shift, and go to state 78

    $default  reduce using rule 74 (expr_block)


State 52

    3 section: marker expr_block •

    $default  reduce using rule 3 (section)


State 53

   35 prefix_chain: atom_chain •

    $default  reduce using rule 35 (prefix_chain)


State 54

   49 bare_val: OP_ASSIGN rhs_expr •

    $default  reduce using rule 49 (bare_val)


State 55

   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 delimited: • parens
   14          | • braces
   15          | • bracks
   51 stmt_if: KW_IF parens • delimited
   52        | KW_IF parens • delimited else_chain

    '('  shift, and go to state 19
    '{'  shift, and go to state 20
    '['  shift, and go to state 21

    parens     go to state 79
    braces     go to state 80
    bracks     go to state 81
    delimited  go to state 82


State 56

   58 stmt_match: KW_MATCH parens • '{' case_block '}'

    '{'  shift, and go to state 83


State 57

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   26 op_type: • OP_TYPE
   27        | • ':'
   31 prefix: • OP_AFFIX
   32       | • '+'
   33       | • '-'
   35 prefix_chain: • atom_chain
   36             | • prefix prefix_chain
   37 affix_chain: • prefix_chain
   38            | • affix_chain suffix
   39 rhs_expr: • affix_chain expr_tail
   40         | • const expr_tail
   43 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   44 empty_decl: • lhs_expr op_type type_expr
   45 assignment: • lhs_expr OP_ASSIGN rhs_expr
   46 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   47 bare_name: • lhs_expr op_type
   48 bare_type: • op_type type_expr
   49 bare_val: • OP_ASSIGN rhs_expr
   50 bare_expr: • rhs_expr
   51 stmt_if: • KW_IF parens delimited
   52        | • KW_IF parens delimited else_chain
   58 stmt_match: • KW_MATCH parens '{' case_block '}'
   59 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   59         | KW_FOR '(' • opt_expr ';' opt_expr ';' opt_expr ')' expr
   60 expr: • full_decl
   61     | • empty_decl
   62     | • assignment
   63     | • typed_val
   64     | • bare_name
   65     | • bare_type
   66     | • bare_val
   67     | • bare_expr
   68     | • stmt_if
   69     | • stmt_match
   70     | • stmt_for
   71 opt_expr: • expr
   72         | ε •  [';']

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    $default  reduce using rule 72 (opt_expr)

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 84
    opt_expr      go to state 85


State 58

    8 ident: '@' TOK_IDENT •

    $default  reduce using rule 8 (ident)


State 59

   77 expr_tuple: expr •  [')', ']']
   78           | expr • ',' expr_tuple

    ','  shift, and go to state 86

    $default  reduce using rule 77 (expr_tuple)


State 60

   10 parens: '(' expr_tuple • ')'

    ')'  shift, and go to state 87


State 61

   11 braces: '{' expr_block • '}'

    '}'  shift, and go to state 88


State 62

   12 bracks: '[' expr_tuple • ']'

    ']'  shift, and go to state 89


State 63

   21 atom_link: '.' expr_atom •

    $default  reduce using rule 21 (atom_link)


State 64

   28 op_bin: OP_BIN •

    $default  reduce using rule 28 (op_bin)


State 65

   29 op_bin: '+' •

    $default  reduce using rule 29 (op_bin)


State 66

   30 op_bin: '-' •

    $default  reduce using rule 30 (op_bin)


State 67

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   31 prefix: • OP_AFFIX
   32       | • '+'
   33       | • '-'
   35 prefix_chain: • atom_chain
   36             | • prefix prefix_chain
   37 affix_chain: • prefix_chain
   38            | • affix_chain suffix
   39 rhs_expr: • affix_chain expr_tail
   40         | • const expr_tail
   41 expr_tail: op_bin • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 53
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 90


State 68

   40 rhs_expr: const expr_tail •

    $default  reduce using rule 40 (rhs_expr)


State 69

   23 atom_chain: atom_link atom_chain •

    $default  reduce using rule 23 (atom_chain)


State 70

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   31 prefix: • OP_AFFIX
   32       | • '+'
   33       | • '-'
   35 prefix_chain: • atom_chain
   36             | • prefix prefix_chain
   37 affix_chain: • prefix_chain
   38            | • affix_chain suffix
   39 rhs_expr: • affix_chain expr_tail
   40         | • const expr_tail
   45 assignment: lhs_expr OP_ASSIGN • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 53
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 91


State 71

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   25 type_expr: • atom_chain
   43 full_decl: lhs_expr op_type • type_expr OP_ASSIGN rhs_expr
   44 empty_decl: lhs_expr op_type • type_expr
   47 bare_name: lhs_expr op_type •  [$end, KW_CASE, '#', ')', '}', ']', ';', ',']

    TOK_IDENT  shift, and go to state 8
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21
    '.'        shift, and go to state 22

    $default  reduce using rule 47 (bare_name)

    ident       go to state 27
    parens      go to state 28
    braces      go to state 29
    bracks      go to state 30
    expr_atom   go to state 31
    atom_link   go to state 32
    atom_chain  go to state 72
    type_expr   go to state 92


State 72

   25 type_expr: atom_chain •

    $default  reduce using rule 25 (type_expr)


State 73

   46 typed_val: op_type type_expr • OP_ASSIGN rhs_expr
   48 bare_type: op_type type_expr •  [$end, KW_CASE, '#', ')', '}', ']', ';', ',']

    OP_ASSIGN  shift, and go to state 93

    $default  reduce using rule 48 (bare_type)


State 74

   36 prefix_chain: prefix prefix_chain •

    $default  reduce using rule 36 (prefix_chain)


State 75

   34 suffix: OP_AFFIX •

    $default  reduce using rule 34 (suffix)


State 76

   38 affix_chain: affix_chain suffix •

    $default  reduce using rule 38 (affix_chain)


State 77

   39 rhs_expr: affix_chain expr_tail •

    $default  reduce using rule 39 (rhs_expr)


State 78

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   26 op_type: • OP_TYPE
   27        | • ':'
   31 prefix: • OP_AFFIX
   32       | • '+'
   33       | • '-'
   35 prefix_chain: • atom_chain
   36             | • prefix prefix_chain
   37 affix_chain: • prefix_chain
   38            | • affix_chain suffix
   39 rhs_expr: • affix_chain expr_tail
   40         | • const expr_tail
   43 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   44 empty_decl: • lhs_expr op_type type_expr
   45 assignment: • lhs_expr OP_ASSIGN rhs_expr
   46 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   47 bare_name: • lhs_expr op_type
   48 bare_type: • op_type type_expr
   49 bare_val: • OP_ASSIGN rhs_expr
   50 bare_expr: • rhs_expr
   51 stmt_if: • KW_IF parens delimited
   52        | • KW_IF parens delimited else_chain
   58 stmt_match: • KW_MATCH parens '{' case_block '}'
   59 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   60 expr: • full_decl
   61     | • empty_decl
   62     | • assignment
   63     | • typed_val
   64     | • bare_name
   65     | • bare_type
   66     | • bare_val
   67     | • bare_expr
   68     | • stmt_if
   69     | • stmt_match
   70     | • stmt_for
   73 expr_block: ε •  [$end, '#', '}']
   74           | • expr
   75           | • expr ';' expr_block
   75           | expr ';' • expr_block

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    $default  reduce using rule 73 (expr_block)

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 51
    expr_block    go to state 94


State 79

   13 delimited: parens •

    $default  reduce using rule 13 (delimited)


State 80

   14 delimited: braces •

    $default  reduce using rule 14 (delimited)


State 81

   15 delimited: bracks •

    $default  reduce using rule 15 (delimited)


State 82

   51 stmt_if: KW_IF parens delimited •  [$end, KW_CASE, '#', ')', '}', ']', ';', ',']
   52        | KW_IF parens delimited • else_chain
   53 else_chain: • KW_ELSE delimited
   54           | • KW_ELSE stmt_if

    KW_ELSE  shift, and go to state 95

    $default  reduce using rule 51 (stmt_if)

    else_chain  go to state 96


State 83

   55 stmt_case: • KW_CASE parens expr
   56 case_block: • stmt_case
   57           | • stmt_case case_block
   58 stmt_match: KW_MATCH parens '{' • case_block '}'

    KW_CASE  shift, and go to state 97

    stmt_case   go to state 98
    case_block  go to state 99


State 84

   71 opt_expr: expr •

    $default  reduce using rule 71 (opt_expr)


State 85

   59 stmt_for: KW_FOR '(' opt_expr • ';' opt_expr ';' opt_expr ')' expr

    ';'  shift, and go to state 100


State 86

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   26 op_type: • OP_TYPE
   27        | • ':'
   31 prefix: • OP_AFFIX
   32       | • '+'
   33       | • '-'
   35 prefix_chain: • atom_chain
   36             | • prefix prefix_chain
   37 affix_chain: • prefix_chain
   38            | • affix_chain suffix
   39 rhs_expr: • affix_chain expr_tail
   40         | • const expr_tail
   43 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   44 empty_decl: • lhs_expr op_type type_expr
   45 assignment: • lhs_expr OP_ASSIGN rhs_expr
   46 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   47 bare_name: • lhs_expr op_type
   48 bare_type: • op_type type_expr
   49 bare_val: • OP_ASSIGN rhs_expr
   50 bare_expr: • rhs_expr
   51 stmt_if: • KW_IF parens delimited
   52        | • KW_IF parens delimited else_chain
   58 stmt_match: • KW_MATCH parens '{' case_block '}'
   59 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   60 expr: • full_decl
   61     | • empty_decl
   62     | • assignment
   63     | • typed_val
   64     | • bare_name
   65     | • bare_type
   66     | • bare_val
   67     | • bare_expr
   68     | • stmt_if
   69     | • stmt_match
   70     | • stmt_for
   76 expr_tuple: ε •  [')', ']']
   77           | • expr
   78           | • expr ',' expr_tuple
   78           | expr ',' • expr_tuple

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    $default  reduce using rule 76 (expr_tuple)

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 59
    expr_tuple    go to state 101


State 87

   10 parens: '(' expr_tuple ')' •

    $default  reduce using rule 10 (parens)


State 88

   11 braces: '{' expr_block '}' •

    $default  reduce using rule 11 (braces)


State 89

   12 bracks: '[' expr_tuple ']' •

    $default  reduce using rule 12 (bracks)


State 90

   41 expr_tail: op_bin rhs_expr •

    $default  reduce using rule 41 (expr_tail)


State 91

   45 assignment: lhs_expr OP_ASSIGN rhs_expr •

    $default  reduce using rule 45 (assignment)


State 92

   43 full_decl: lhs_expr op_type type_expr • OP_ASSIGN rhs_expr
   44 empty_decl: lhs_expr op_type type_expr •  [$end, KW_CASE, '#', ')', '}', ']', ';', ',']

    OP_ASSIGN  shift, and go to state 102

    $default  reduce using rule 44 (empty_decl)


State 93

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   31 prefix: • OP_AFFIX
   32       | • '+'
   33       | • '-'
   35 prefix_chain: • atom_chain
   36             | • prefix prefix_chain
   37 affix_chain: • prefix_chain
   38            | • affix_chain suffix
   39 rhs_expr: • affix_chain expr_tail
   40         | • const expr_tail
   46 typed_val: op_type type_expr OP_ASSIGN • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 53
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 103


State 94

   75 expr_block: expr ';' expr_block •

    $default  reduce using rule 75 (expr_block)


State 95

   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 delimited: • parens
   14          | • braces
   15          | • bracks
   51 stmt_if: • KW_IF parens delimited
   52        | • KW_IF parens delimited else_chain
   53 else_chain: KW_ELSE • delimited
   54           | KW_ELSE • stmt_if

    KW_IF  shift, and go to state 15
    '('    shift, and go to state 19
    '{'    shift, and go to state 20
    '['    shift, and go to state 21

    parens     go to state 79
    braces     go to state 80
    bracks     go to state 81
    delimited  go to state 104
    stmt_if    go to state 105


State 96

   52 stmt_if: KW_IF parens delimited else_chain •

    $default  reduce using rule 52 (stmt_if)


State 97

   10 parens: • '(' expr_tuple ')'
   55 stmt_case: KW_CASE • parens expr

    '('  shift, and go to state 19

    parens  go to state 106


State 98

   55 stmt_case: • KW_CASE parens expr
   56 case_block: • stmt_case
   56           | stmt_case •  ['}']
   57           | • stmt_case case_block
   57           | stmt_case • case_block

    KW_CASE  shift, and go to state 97

    $default  reduce using rule 56 (case_block)

    stmt_case   go to state 98
    case_block  go to state 107


State 99

   58 stmt_match: KW_MATCH parens '{' case_block • '}'

    '}'  shift, and go to state 108


State 100

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   26 op_type: • OP_TYPE
   27        | • ':'
   31 prefix: • OP_AFFIX
   32       | • '+'
   33       | • '-'
   35 prefix_chain: • atom_chain
   36             | • prefix prefix_chain
   37 affix_chain: • prefix_chain
   38            | • affix_chain suffix
   39 rhs_expr: • affix_chain expr_tail
   40         | • const expr_tail
   43 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   44 empty_decl: • lhs_expr op_type type_expr
   45 assignment: • lhs_expr OP_ASSIGN rhs_expr
   46 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   47 bare_name: • lhs_expr op_type
   48 bare_type: • op_type type_expr
   49 bare_val: • OP_ASSIGN rhs_expr
   50 bare_expr: • rhs_expr
   51 stmt_if: • KW_IF parens delimited
   52        | • KW_IF parens delimited else_chain
   58 stmt_match: • KW_MATCH parens '{' case_block '}'
   59 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   59         | KW_FOR '(' opt_expr ';' • opt_expr ';' opt_expr ')' expr
   60 expr: • full_decl
   61     | • empty_decl
   62     | • assignment
   63     | • typed_val
   64     | • bare_name
   65     | • bare_type
   66     | • bare_val
   67     | • bare_expr
   68     | • stmt_if
   69     | • stmt_match
   70     | • stmt_for
   71 opt_expr: • expr
   72         | ε •  [';']

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    $default  reduce using rule 72 (opt_expr)

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 84
    opt_expr      go to state 109


State 101

   78 expr_tuple: expr ',' expr_tuple •

    $default  reduce using rule 78 (expr_tuple)


State 102

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   31 prefix: • OP_AFFIX
   32       | • '+'
   33       | • '-'
   35 prefix_chain: • atom_chain
   36             | • prefix prefix_chain
   37 affix_chain: • prefix_chain
   38            | • affix_chain suffix
   39 rhs_expr: • affix_chain expr_tail
   40         | • const expr_tail
   43 full_decl: lhs_expr op_type type_expr OP_ASSIGN • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 53
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 110


State 103

   46 typed_val: op_type type_expr OP_ASSIGN rhs_expr •

    $default  reduce using rule 46 (typed_val)


State 104

   53 else_chain: KW_ELSE delimited •

    $default  reduce using rule 53 (else_chain)


State 105

   54 else_chain: KW_ELSE stmt_if •

    $default  reduce using rule 54 (else_chain)


State 106

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   26 op_type: • OP_TYPE
   27        | • ':'
   31 prefix: • OP_AFFIX
   32       | • '+'
   33       | • '-'
   35 prefix_chain: • atom_chain
   36             | • prefix prefix_chain
   37 affix_chain: • prefix_chain
   38            | • affix_chain suffix
   39 rhs_expr: • affix_chain expr_tail
   40         | • const expr_tail
   43 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   44 empty_decl: • lhs_expr op_type type_expr
   45 assignment: • lhs_expr OP_ASSIGN rhs_expr
   46 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   47 bare_name: • lhs_expr op_type
   48 bare_type: • op_type type_expr
   49 bare_val: • OP_ASSIGN rhs_expr
   50 bare_expr: • rhs_expr
   51 stmt_if: • KW_IF parens delimited
   52        | • KW_IF parens delimited else_chain
   55 stmt_case: KW_CASE parens • expr
   58 stmt_match: • KW_MATCH parens '{' case_block '}'
   59 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   60 expr: • full_decl
   61     | • empty_decl
   62     | • assignment
   63     | • typed_val
   64     | • bare_name
   65     | • bare_type
   66     | • bare_val
   67     | • bare_expr
   68     | • stmt_if
   69     | • stmt_match
   70     | • stmt_for

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 111


State 107

   57 case_block: stmt_case case_block •

    $default  reduce using rule 57 (case_block)


State 108

   58 stmt_match: KW_MATCH parens '{' case_block '}' •

    $default  reduce using rule 58 (stmt_match)


State 109

   59 stmt_for: KW_FOR '(' opt_expr ';' opt_expr • ';' opt_expr ')' expr

    ';'  shift, and go to state 112


State 110

   43 full_decl: lhs_expr op_type type_expr OP_ASSIGN rhs_expr •

    $default  reduce using rule 43 (full_decl)


State 111

   55 stmt_case: KW_CASE parens expr •

    $default  reduce using rule 55 (stmt_case)


State 112

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   26 op_type: • OP_TYPE
   27        | • ':'
   31 prefix: • OP_AFFIX
   32       | • '+'
   33       | • '-'
   35 prefix_chain: • atom_chain
   36             | • prefix prefix_chain
   37 affix_chain: • prefix_chain
   38            | • affix_chain suffix
   39 rhs_expr: • affix_chain expr_tail
   40         | • const expr_tail
   43 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   44 empty_decl: • lhs_expr op_type type_expr
   45 assignment: • lhs_expr OP_ASSIGN rhs_expr
   46 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   47 bare_name: • lhs_expr op_type
   48 bare_type: • op_type type_expr
   49 bare_val: • OP_ASSIGN rhs_expr
   50 bare_expr: • rhs_expr
   51 stmt_if: • KW_IF parens delimited
   52        | • KW_IF parens delimited else_chain
   58 stmt_match: • KW_MATCH parens '{' case_block '}'
   59 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   59         | KW_FOR '(' opt_expr ';' opt_expr ';' • opt_expr ')' expr
   60 expr: • full_decl
   61     | • empty_decl
   62     | • assignment
   63     | • typed_val
   64     | • bare_name
   65     | • bare_type
   66     | • bare_val
   67     | • bare_expr
   68     | • stmt_if
   69     | • stmt_match
   70     | • stmt_for
   71 opt_expr: • expr
   72         | ε •  [')']

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    $default  reduce using rule 72 (opt_expr)

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 84
    opt_expr      go to state 113


State 113

   59 stmt_for: KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr • ')' expr

    ')'  shift, and go to state 114


State 114

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   26 op_type: • OP_TYPE
   27        | • ':'
   31 prefix: • OP_AFFIX
   32       | • '+'
   33       | • '-'
   35 prefix_chain: • atom_chain
   36             | • prefix prefix_chain
   37 affix_chain: • prefix_chain
   38            | • affix_chain suffix
   39 rhs_expr: • affix_chain expr_tail
   40         | • const expr_tail
   43 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   44 empty_decl: • lhs_expr op_type type_expr
   45 assignment: • lhs_expr OP_ASSIGN rhs_expr
   46 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   47 bare_name: • lhs_expr op_type
   48 bare_type: • op_type type_expr
   49 bare_val: • OP_ASSIGN rhs_expr
   50 bare_expr: • rhs_expr
   51 stmt_if: • KW_IF parens delimited
   52        | • KW_IF parens delimited else_chain
   58 stmt_match: • KW_MATCH parens '{' case_block '}'
   59 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   59         | KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' • expr
   60 expr: • full_decl
   61     | • empty_decl
   62     | • assignment
   63     | • typed_val
   64     | • bare_name
   65     | • bare_type
   66     | • bare_val
   67     | • bare_expr
   68     | • stmt_if
   69     | • stmt_match
   70     | • stmt_for

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 115


State 115

   59 stmt_for: KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr •

    $default  reduce using rule 59 (stmt_for)
