Grammar

    0 $accept: program $end

    1 program: section
    2        | section program

    3 section: marker expr_block

    4 marker: '#' TOK_IDENT

    5 const: TOK_INT
    6      | TOK_FLOAT
    7      | TOK_STRING

    8 ident: '@' TOK_IDENT
    9      | TOK_IDENT

   10 parens: '(' expr_tuple ')'

   11 braces: '{' expr_block '}'

   12 bracks: '[' expr_tuple ']'

   13 delimited: parens
   14          | braces
   15          | bracks

   16 expr_atom: ident
   17          | parens
   18          | braces
   19          | bracks

   20 atom_link: expr_atom
   21          | '.' expr_atom

   22 atom_chain: atom_link
   23           | atom_link atom_chain

   24 lhs_expr: atom_chain
   25         | '.'

   26 type_expr: atom_chain

   27 op_type: OP_TYPE
   28        | ':'

   29 op_bin: OP_BIN
   30       | '+'
   31       | '-'

   32 prefix: OP_AFFIX
   33       | '+'
   34       | '-'

   35 suffix: OP_AFFIX

   36 prefix_chain: atom_chain
   37             | prefix prefix_chain

   38 affix_chain: prefix_chain
   39            | affix_chain suffix

   40 rhs_expr: affix_chain expr_tail
   41         | const expr_tail

   42 expr_tail: op_bin rhs_expr
   43          | ε

   44 full_decl: lhs_expr op_type type_expr OP_ASSIGN rhs_expr

   45 empty_decl: lhs_expr op_type type_expr

   46 assignment: lhs_expr OP_ASSIGN rhs_expr

   47 typed_val: op_type type_expr OP_ASSIGN rhs_expr

   48 bare_name: lhs_expr op_type

   49 bare_type: op_type type_expr

   50 bare_val: OP_ASSIGN rhs_expr

   51 bare_expr: rhs_expr

   52 stmt_if: KW_IF parens delimited
   53        | KW_IF parens delimited else_chain

   54 else_chain: KW_ELSE delimited
   55           | KW_ELSE stmt_if

   56 stmt_case: KW_CASE parens expr

   57 case_block: stmt_case
   58           | stmt_case case_block

   59 stmt_match: KW_MATCH parens '{' case_block '}'

   60 stmt_for: KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr

   61 expr: full_decl
   62     | empty_decl
   63     | assignment
   64     | typed_val
   65     | bare_name
   66     | bare_type
   67     | bare_val
   68     | bare_expr
   69     | stmt_if
   70     | stmt_match
   71     | stmt_for

   72 opt_expr: expr
   73         | ε

   74 expr_block: ε
   75           | expr
   76           | expr ';' expr_block

   77 expr_tuple: ε
   78           | expr
   79           | expr ',' expr_tuple


Terminals, with rules where they appear

    $end (0) 0
    '#' (35) 4
    '(' (40) 10 60
    ')' (41) 10 60
    '+' (43) 30 33
    ',' (44) 79
    '-' (45) 31 34
    '.' (46) 21 25
    ':' (58) 28
    ';' (59) 60 76
    '@' (64) 8
    '[' (91) 12
    ']' (93) 12
    '{' (123) 11 59
    '}' (125) 11 59
    error (256)
    TOK_IDENT <val_str> (258) 4 8 9
    TOK_INT <val_int> (259) 5
    TOK_FLOAT <val_float> (260) 6
    TOK_STRING <val_str> (261) 7
    OP_TYPE <val_str> (262) 27
    OP_ASSIGN <val_str> (263) 44 46 47 50
    OP_BIN <val_str> (264) 29
    OP_AFFIX <val_str> (265) 32 35
    KW_IF (266) 52 53
    KW_ELSE (267) 54 55
    KW_MATCH (268) 59
    KW_CASE (269) 56
    KW_FOR (270) 60


Nonterminals, with rules where they appear

    $accept (30)
        on left: 0
    program (31)
        on left: 1 2
        on right: 0 2
    section (32)
        on left: 3
        on right: 1 2
    marker (33)
        on left: 4
        on right: 3
    const (34)
        on left: 5 6 7
        on right: 41
    ident (35)
        on left: 8 9
        on right: 16
    parens (36)
        on left: 10
        on right: 13 17 52 53 56 59
    braces (37)
        on left: 11
        on right: 14 18
    bracks (38)
        on left: 12
        on right: 15 19
    delimited (39)
        on left: 13 14 15
        on right: 52 53 54
    expr_atom (40)
        on left: 16 17 18 19
        on right: 20 21
    atom_link (41)
        on left: 20 21
        on right: 22 23
    atom_chain (42)
        on left: 22 23
        on right: 23 24 26 36
    lhs_expr (43)
        on left: 24 25
        on right: 44 45 46 48
    type_expr (44)
        on left: 26
        on right: 44 45 47 49
    op_type (45)
        on left: 27 28
        on right: 44 45 47 48 49
    op_bin (46)
        on left: 29 30 31
        on right: 42
    prefix (47)
        on left: 32 33 34
        on right: 37
    suffix (48)
        on left: 35
        on right: 39
    prefix_chain (49)
        on left: 36 37
        on right: 37 38
    affix_chain (50)
        on left: 38 39
        on right: 39 40
    rhs_expr (51)
        on left: 40 41
        on right: 42 44 46 47 50 51
    expr_tail (52)
        on left: 42 43
        on right: 40 41
    full_decl (53)
        on left: 44
        on right: 61
    empty_decl (54)
        on left: 45
        on right: 62
    assignment (55)
        on left: 46
        on right: 63
    typed_val (56)
        on left: 47
        on right: 64
    bare_name (57)
        on left: 48
        on right: 65
    bare_type (58)
        on left: 49
        on right: 66
    bare_val (59)
        on left: 50
        on right: 67
    bare_expr (60)
        on left: 51
        on right: 68
    stmt_if (61)
        on left: 52 53
        on right: 55 69
    else_chain (62)
        on left: 54 55
        on right: 53
    stmt_case (63)
        on left: 56
        on right: 57 58
    case_block (64)
        on left: 57 58
        on right: 58 59
    stmt_match (65)
        on left: 59
        on right: 70
    stmt_for (66)
        on left: 60
        on right: 71
    expr (67)
        on left: 61 62 63 64 65 66 67 68 69 70 71
        on right: 56 60 72 75 76 78 79
    opt_expr (68)
        on left: 72 73
        on right: 60
    expr_block (69)
        on left: 74 75 76
        on right: 3 11 76
    expr_tuple (70)
        on left: 77 78 79
        on right: 10 12 79


State 0

    0 $accept: • program $end
    1 program: • section
    2        | • section program
    3 section: • marker expr_block
    4 marker: • '#' TOK_IDENT

    '#'  shift, and go to state 1

    program  go to state 2
    section  go to state 3
    marker   go to state 4


State 1

    4 marker: '#' • TOK_IDENT

    TOK_IDENT  shift, and go to state 5


State 2

    0 $accept: program • $end

    $end  shift, and go to state 6


State 3

    1 program: • section
    1        | section •  [$end]
    2        | • section program
    2        | section • program
    3 section: • marker expr_block
    4 marker: • '#' TOK_IDENT

    '#'  shift, and go to state 1

    $default  reduce using rule 1 (program)

    program  go to state 7
    section  go to state 3
    marker   go to state 4


State 4

    3 section: marker • expr_block
    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   25         | • '.'
   27 op_type: • OP_TYPE
   28        | • ':'
   32 prefix: • OP_AFFIX
   33       | • '+'
   34       | • '-'
   36 prefix_chain: • atom_chain
   37             | • prefix prefix_chain
   38 affix_chain: • prefix_chain
   39            | • affix_chain suffix
   40 rhs_expr: • affix_chain expr_tail
   41         | • const expr_tail
   44 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   45 empty_decl: • lhs_expr op_type type_expr
   46 assignment: • lhs_expr OP_ASSIGN rhs_expr
   47 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   48 bare_name: • lhs_expr op_type
   49 bare_type: • op_type type_expr
   50 bare_val: • OP_ASSIGN rhs_expr
   51 bare_expr: • rhs_expr
   52 stmt_if: • KW_IF parens delimited
   53        | • KW_IF parens delimited else_chain
   59 stmt_match: • KW_MATCH parens '{' case_block '}'
   60 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   61 expr: • full_decl
   62     | • empty_decl
   63     | • assignment
   64     | • typed_val
   65     | • bare_name
   66     | • bare_type
   67     | • bare_val
   68     | • bare_expr
   69     | • stmt_if
   70     | • stmt_match
   71     | • stmt_for
   74 expr_block: ε •  [$end, '#']
   75           | • expr
   76           | • expr ';' expr_block

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    $default  reduce using rule 74 (expr_block)

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 51
    expr_block    go to state 52


State 5

    4 marker: '#' TOK_IDENT •

    $default  reduce using rule 4 (marker)


State 6

    0 $accept: program $end •

    $default  accept


State 7

    2 program: section program •

    $default  reduce using rule 2 (program)


State 8

    9 ident: TOK_IDENT •

    $default  reduce using rule 9 (ident)


State 9

    5 const: TOK_INT •

    $default  reduce using rule 5 (const)


State 10

    6 const: TOK_FLOAT •

    $default  reduce using rule 6 (const)


State 11

    7 const: TOK_STRING •

    $default  reduce using rule 7 (const)


State 12

   27 op_type: OP_TYPE •

    $default  reduce using rule 27 (op_type)


State 13

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   32 prefix: • OP_AFFIX
   33       | • '+'
   34       | • '-'
   36 prefix_chain: • atom_chain
   37             | • prefix prefix_chain
   38 affix_chain: • prefix_chain
   39            | • affix_chain suffix
   40 rhs_expr: • affix_chain expr_tail
   41         | • const expr_tail
   50 bare_val: OP_ASSIGN • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 53
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 54
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 55


State 14

   32 prefix: OP_AFFIX •

    $default  reduce using rule 32 (prefix)


State 15

   10 parens: • '(' expr_tuple ')'
   52 stmt_if: KW_IF • parens delimited
   53        | KW_IF • parens delimited else_chain

    '('  shift, and go to state 19

    parens  go to state 56


State 16

   10 parens: • '(' expr_tuple ')'
   59 stmt_match: KW_MATCH • parens '{' case_block '}'

    '('  shift, and go to state 19

    parens  go to state 57


State 17

   60 stmt_for: KW_FOR • '(' opt_expr ';' opt_expr ';' opt_expr ')' expr

    '('  shift, and go to state 58


State 18

    8 ident: '@' • TOK_IDENT

    TOK_IDENT  shift, and go to state 59


State 19

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   10       | '(' • expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   25         | • '.'
   27 op_type: • OP_TYPE
   28        | • ':'
   32 prefix: • OP_AFFIX
   33       | • '+'
   34       | • '-'
   36 prefix_chain: • atom_chain
   37             | • prefix prefix_chain
   38 affix_chain: • prefix_chain
   39            | • affix_chain suffix
   40 rhs_expr: • affix_chain expr_tail
   41         | • const expr_tail
   44 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   45 empty_decl: • lhs_expr op_type type_expr
   46 assignment: • lhs_expr OP_ASSIGN rhs_expr
   47 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   48 bare_name: • lhs_expr op_type
   49 bare_type: • op_type type_expr
   50 bare_val: • OP_ASSIGN rhs_expr
   51 bare_expr: • rhs_expr
   52 stmt_if: • KW_IF parens delimited
   53        | • KW_IF parens delimited else_chain
   59 stmt_match: • KW_MATCH parens '{' case_block '}'
   60 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   61 expr: • full_decl
   62     | • empty_decl
   63     | • assignment
   64     | • typed_val
   65     | • bare_name
   66     | • bare_type
   67     | • bare_val
   68     | • bare_expr
   69     | • stmt_if
   70     | • stmt_match
   71     | • stmt_for
   77 expr_tuple: ε •  [')']
   78           | • expr
   79           | • expr ',' expr_tuple

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    $default  reduce using rule 77 (expr_tuple)

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 60
    expr_tuple    go to state 61


State 20

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   11       | '{' • expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   25         | • '.'
   27 op_type: • OP_TYPE
   28        | • ':'
   32 prefix: • OP_AFFIX
   33       | • '+'
   34       | • '-'
   36 prefix_chain: • atom_chain
   37             | • prefix prefix_chain
   38 affix_chain: • prefix_chain
   39            | • affix_chain suffix
   40 rhs_expr: • affix_chain expr_tail
   41         | • const expr_tail
   44 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   45 empty_decl: • lhs_expr op_type type_expr
   46 assignment: • lhs_expr OP_ASSIGN rhs_expr
   47 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   48 bare_name: • lhs_expr op_type
   49 bare_type: • op_type type_expr
   50 bare_val: • OP_ASSIGN rhs_expr
   51 bare_expr: • rhs_expr
   52 stmt_if: • KW_IF parens delimited
   53        | • KW_IF parens delimited else_chain
   59 stmt_match: • KW_MATCH parens '{' case_block '}'
   60 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   61 expr: • full_decl
   62     | • empty_decl
   63     | • assignment
   64     | • typed_val
   65     | • bare_name
   66     | • bare_type
   67     | • bare_val
   68     | • bare_expr
   69     | • stmt_if
   70     | • stmt_match
   71     | • stmt_for
   74 expr_block: ε •  ['}']
   75           | • expr
   76           | • expr ';' expr_block

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    $default  reduce using rule 74 (expr_block)

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 51
    expr_block    go to state 62


State 21

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   12       | '[' • expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   25         | • '.'
   27 op_type: • OP_TYPE
   28        | • ':'
   32 prefix: • OP_AFFIX
   33       | • '+'
   34       | • '-'
   36 prefix_chain: • atom_chain
   37             | • prefix prefix_chain
   38 affix_chain: • prefix_chain
   39            | • affix_chain suffix
   40 rhs_expr: • affix_chain expr_tail
   41         | • const expr_tail
   44 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   45 empty_decl: • lhs_expr op_type type_expr
   46 assignment: • lhs_expr OP_ASSIGN rhs_expr
   47 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   48 bare_name: • lhs_expr op_type
   49 bare_type: • op_type type_expr
   50 bare_val: • OP_ASSIGN rhs_expr
   51 bare_expr: • rhs_expr
   52 stmt_if: • KW_IF parens delimited
   53        | • KW_IF parens delimited else_chain
   59 stmt_match: • KW_MATCH parens '{' case_block '}'
   60 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   61 expr: • full_decl
   62     | • empty_decl
   63     | • assignment
   64     | • typed_val
   65     | • bare_name
   66     | • bare_type
   67     | • bare_val
   68     | • bare_expr
   69     | • stmt_if
   70     | • stmt_match
   71     | • stmt_for
   77 expr_tuple: ε •  [']']
   78           | • expr
   79           | • expr ',' expr_tuple

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    $default  reduce using rule 77 (expr_tuple)

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 60
    expr_tuple    go to state 63


State 22

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   21 atom_link: '.' • expr_atom
   25 lhs_expr: '.' •  [OP_TYPE, OP_ASSIGN, ':']

    TOK_IDENT  shift, and go to state 8
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21

    $default  reduce using rule 25 (lhs_expr)

    ident      go to state 27
    parens     go to state 28
    braces     go to state 29
    bracks     go to state 30
    expr_atom  go to state 64


State 23

   28 op_type: ':' •

    $default  reduce using rule 28 (op_type)


State 24

   33 prefix: '+' •

    $default  reduce using rule 33 (prefix)


State 25

   34 prefix: '-' •

    $default  reduce using rule 34 (prefix)


State 26

   29 op_bin: • OP_BIN
   30       | • '+'
   31       | • '-'
   41 rhs_expr: const • expr_tail
   42 expr_tail: • op_bin rhs_expr
   43          | ε •  [$end, KW_CASE, '#', ')', '}', ']', ';', ',']

    OP_BIN  shift, and go to state 65
    '+'     shift, and go to state 66
    '-'     shift, and go to state 67

    $default  reduce using rule 43 (expr_tail)

    op_bin     go to state 68
    expr_tail  go to state 69


State 27

   16 expr_atom: ident •

    $default  reduce using rule 16 (expr_atom)


State 28

   17 expr_atom: parens •

    $default  reduce using rule 17 (expr_atom)


State 29

   18 expr_atom: braces •

    $default  reduce using rule 18 (expr_atom)


State 30

   19 expr_atom: bracks •

    $default  reduce using rule 19 (expr_atom)


State 31

   20 atom_link: expr_atom •

    $default  reduce using rule 20 (atom_link)


State 32

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   22           | atom_link •  [$end, OP_TYPE, OP_ASSIGN, OP_BIN, OP_AFFIX, KW_CASE, '#', ')', '}', ']', ':', '+', '-', ';', ',']
   23           | • atom_link atom_chain
   23           | atom_link • atom_chain

    TOK_IDENT  shift, and go to state 8
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21
    '.'        shift, and go to state 53

    $default  reduce using rule 22 (atom_chain)

    ident       go to state 27
    parens      go to state 28
    braces      go to state 29
    bracks      go to state 30
    expr_atom   go to state 31
    atom_link   go to state 32
    atom_chain  go to state 70


State 33

   24 lhs_expr: atom_chain •  [OP_TYPE, OP_ASSIGN, ':']
   36 prefix_chain: atom_chain •  [$end, OP_BIN, OP_AFFIX, KW_CASE, '#', ')', '}', ']', '+', '-', ';', ',']

    OP_TYPE    reduce using rule 24 (lhs_expr)
    OP_ASSIGN  reduce using rule 24 (lhs_expr)
    ':'        reduce using rule 24 (lhs_expr)
    $default   reduce using rule 36 (prefix_chain)


State 34

   27 op_type: • OP_TYPE
   28        | • ':'
   44 full_decl: lhs_expr • op_type type_expr OP_ASSIGN rhs_expr
   45 empty_decl: lhs_expr • op_type type_expr
   46 assignment: lhs_expr • OP_ASSIGN rhs_expr
   48 bare_name: lhs_expr • op_type

    OP_TYPE    shift, and go to state 12
    OP_ASSIGN  shift, and go to state 71
    ':'        shift, and go to state 23

    op_type  go to state 72


State 35

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   26 type_expr: • atom_chain
   47 typed_val: op_type • type_expr OP_ASSIGN rhs_expr
   49 bare_type: op_type • type_expr

    TOK_IDENT  shift, and go to state 8
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21
    '.'        shift, and go to state 53

    ident       go to state 27
    parens      go to state 28
    braces      go to state 29
    bracks      go to state 30
    expr_atom   go to state 31
    atom_link   go to state 32
    atom_chain  go to state 73
    type_expr   go to state 74


State 36

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   32 prefix: • OP_AFFIX
   33       | • '+'
   34       | • '-'
   36 prefix_chain: • atom_chain
   37             | • prefix prefix_chain
   37             | prefix • prefix_chain

    TOK_IDENT  shift, and go to state 8
    OP_AFFIX   shift, and go to state 14
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21
    '.'        shift, and go to state 53
    '+'        shift, and go to state 24
    '-'        shift, and go to state 25

    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 54
    prefix        go to state 36
    prefix_chain  go to state 75


State 37

   38 affix_chain: prefix_chain •

    $default  reduce using rule 38 (affix_chain)


State 38

   29 op_bin: • OP_BIN
   30       | • '+'
   31       | • '-'
   35 suffix: • OP_AFFIX
   39 affix_chain: affix_chain • suffix
   40 rhs_expr: affix_chain • expr_tail
   42 expr_tail: • op_bin rhs_expr
   43          | ε •  [$end, KW_CASE, '#', ')', '}', ']', ';', ',']

    OP_BIN    shift, and go to state 65
    OP_AFFIX  shift, and go to state 76
    '+'       shift, and go to state 66
    '-'       shift, and go to state 67

    $default  reduce using rule 43 (expr_tail)

    op_bin     go to state 68
    suffix     go to state 77
    expr_tail  go to state 78


State 39

   51 bare_expr: rhs_expr •

    $default  reduce using rule 51 (bare_expr)


State 40

   61 expr: full_decl •

    $default  reduce using rule 61 (expr)


State 41

   62 expr: empty_decl •

    $default  reduce using rule 62 (expr)


State 42

   63 expr: assignment •

    $default  reduce using rule 63 (expr)


State 43

   64 expr: typed_val •

    $default  reduce using rule 64 (expr)


State 44

   65 expr: bare_name •

    $default  reduce using rule 65 (expr)


State 45

   66 expr: bare_type •

    $default  reduce using rule 66 (expr)


State 46

   67 expr: bare_val •

    $default  reduce using rule 67 (expr)


State 47

   68 expr: bare_expr •

    $default  reduce using rule 68 (expr)


State 48

   69 expr: stmt_if •

    $default  reduce using rule 69 (expr)


State 49

   70 expr: stmt_match •

    $default  reduce using rule 70 (expr)


State 50

   71 expr: stmt_for •

    $default  reduce using rule 71 (expr)


State 51

   75 expr_block: expr •  [$end, '#', '}']
   76           | expr • ';' expr_block

    ';'  shift, and go to state 79

    $default  reduce using rule 75 (expr_block)


State 52

    3 section: marker expr_block •

    $default  reduce using rule 3 (section)


State 53

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   21 atom_link: '.' • expr_atom

    TOK_IDENT  shift, and go to state 8
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21

    ident      go to state 27
    parens     go to state 28
    braces     go to state 29
    bracks     go to state 30
    expr_atom  go to state 64


State 54

   36 prefix_chain: atom_chain •

    $default  reduce using rule 36 (prefix_chain)


State 55

   50 bare_val: OP_ASSIGN rhs_expr •

    $default  reduce using rule 50 (bare_val)


State 56

   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 delimited: • parens
   14          | • braces
   15          | • bracks
   52 stmt_if: KW_IF parens • delimited
   53        | KW_IF parens • delimited else_chain

    '('  shift, and go to state 19
    '{'  shift, and go to state 20
    '['  shift, and go to state 21

    parens     go to state 80
    braces     go to state 81
    bracks     go to state 82
    delimited  go to state 83


State 57

   59 stmt_match: KW_MATCH parens • '{' case_block '}'

    '{'  shift, and go to state 84


State 58

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   25         | • '.'
   27 op_type: • OP_TYPE
   28        | • ':'
   32 prefix: • OP_AFFIX
   33       | • '+'
   34       | • '-'
   36 prefix_chain: • atom_chain
   37             | • prefix prefix_chain
   38 affix_chain: • prefix_chain
   39            | • affix_chain suffix
   40 rhs_expr: • affix_chain expr_tail
   41         | • const expr_tail
   44 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   45 empty_decl: • lhs_expr op_type type_expr
   46 assignment: • lhs_expr OP_ASSIGN rhs_expr
   47 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   48 bare_name: • lhs_expr op_type
   49 bare_type: • op_type type_expr
   50 bare_val: • OP_ASSIGN rhs_expr
   51 bare_expr: • rhs_expr
   52 stmt_if: • KW_IF parens delimited
   53        | • KW_IF parens delimited else_chain
   59 stmt_match: • KW_MATCH parens '{' case_block '}'
   60 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   60         | KW_FOR '(' • opt_expr ';' opt_expr ';' opt_expr ')' expr
   61 expr: • full_decl
   62     | • empty_decl
   63     | • assignment
   64     | • typed_val
   65     | • bare_name
   66     | • bare_type
   67     | • bare_val
   68     | • bare_expr
   69     | • stmt_if
   70     | • stmt_match
   71     | • stmt_for
   72 opt_expr: • expr
   73         | ε •  [';']

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    $default  reduce using rule 73 (opt_expr)

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 85
    opt_expr      go to state 86


State 59

    8 ident: '@' TOK_IDENT •

    $default  reduce using rule 8 (ident)


State 60

   78 expr_tuple: expr •  [')', ']']
   79           | expr • ',' expr_tuple

    ','  shift, and go to state 87

    $default  reduce using rule 78 (expr_tuple)


State 61

   10 parens: '(' expr_tuple • ')'

    ')'  shift, and go to state 88


State 62

   11 braces: '{' expr_block • '}'

    '}'  shift, and go to state 89


State 63

   12 bracks: '[' expr_tuple • ']'

    ']'  shift, and go to state 90


State 64

   21 atom_link: '.' expr_atom •

    $default  reduce using rule 21 (atom_link)


State 65

   29 op_bin: OP_BIN •

    $default  reduce using rule 29 (op_bin)


State 66

   30 op_bin: '+' •

    $default  reduce using rule 30 (op_bin)


State 67

   31 op_bin: '-' •

    $default  reduce using rule 31 (op_bin)


State 68

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   32 prefix: • OP_AFFIX
   33       | • '+'
   34       | • '-'
   36 prefix_chain: • atom_chain
   37             | • prefix prefix_chain
   38 affix_chain: • prefix_chain
   39            | • affix_chain suffix
   40 rhs_expr: • affix_chain expr_tail
   41         | • const expr_tail
   42 expr_tail: op_bin • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 53
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 54
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 91


State 69

   41 rhs_expr: const expr_tail •

    $default  reduce using rule 41 (rhs_expr)


State 70

   23 atom_chain: atom_link atom_chain •

    $default  reduce using rule 23 (atom_chain)


State 71

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   32 prefix: • OP_AFFIX
   33       | • '+'
   34       | • '-'
   36 prefix_chain: • atom_chain
   37             | • prefix prefix_chain
   38 affix_chain: • prefix_chain
   39            | • affix_chain suffix
   40 rhs_expr: • affix_chain expr_tail
   41         | • const expr_tail
   46 assignment: lhs_expr OP_ASSIGN • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 53
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 54
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 92


State 72

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   26 type_expr: • atom_chain
   44 full_decl: lhs_expr op_type • type_expr OP_ASSIGN rhs_expr
   45 empty_decl: lhs_expr op_type • type_expr
   48 bare_name: lhs_expr op_type •  [$end, KW_CASE, '#', ')', '}', ']', ';', ',']

    TOK_IDENT  shift, and go to state 8
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21
    '.'        shift, and go to state 53

    $default  reduce using rule 48 (bare_name)

    ident       go to state 27
    parens      go to state 28
    braces      go to state 29
    bracks      go to state 30
    expr_atom   go to state 31
    atom_link   go to state 32
    atom_chain  go to state 73
    type_expr   go to state 93


State 73

   26 type_expr: atom_chain •

    $default  reduce using rule 26 (type_expr)


State 74

   47 typed_val: op_type type_expr • OP_ASSIGN rhs_expr
   49 bare_type: op_type type_expr •  [$end, KW_CASE, '#', ')', '}', ']', ';', ',']

    OP_ASSIGN  shift, and go to state 94

    $default  reduce using rule 49 (bare_type)


State 75

   37 prefix_chain: prefix prefix_chain •

    $default  reduce using rule 37 (prefix_chain)


State 76

   35 suffix: OP_AFFIX •

    $default  reduce using rule 35 (suffix)


State 77

   39 affix_chain: affix_chain suffix •

    $default  reduce using rule 39 (affix_chain)


State 78

   40 rhs_expr: affix_chain expr_tail •

    $default  reduce using rule 40 (rhs_expr)


State 79

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   25         | • '.'
   27 op_type: • OP_TYPE
   28        | • ':'
   32 prefix: • OP_AFFIX
   33       | • '+'
   34       | • '-'
   36 prefix_chain: • atom_chain
   37             | • prefix prefix_chain
   38 affix_chain: • prefix_chain
   39            | • affix_chain suffix
   40 rhs_expr: • affix_chain expr_tail
   41         | • const expr_tail
   44 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   45 empty_decl: • lhs_expr op_type type_expr
   46 assignment: • lhs_expr OP_ASSIGN rhs_expr
   47 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   48 bare_name: • lhs_expr op_type
   49 bare_type: • op_type type_expr
   50 bare_val: • OP_ASSIGN rhs_expr
   51 bare_expr: • rhs_expr
   52 stmt_if: • KW_IF parens delimited
   53        | • KW_IF parens delimited else_chain
   59 stmt_match: • KW_MATCH parens '{' case_block '}'
   60 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   61 expr: • full_decl
   62     | • empty_decl
   63     | • assignment
   64     | • typed_val
   65     | • bare_name
   66     | • bare_type
   67     | • bare_val
   68     | • bare_expr
   69     | • stmt_if
   70     | • stmt_match
   71     | • stmt_for
   74 expr_block: ε •  [$end, '#', '}']
   75           | • expr
   76           | • expr ';' expr_block
   76           | expr ';' • expr_block

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    $default  reduce using rule 74 (expr_block)

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 51
    expr_block    go to state 95


State 80

   13 delimited: parens •

    $default  reduce using rule 13 (delimited)


State 81

   14 delimited: braces •

    $default  reduce using rule 14 (delimited)


State 82

   15 delimited: bracks •

    $default  reduce using rule 15 (delimited)


State 83

   52 stmt_if: KW_IF parens delimited •  [$end, KW_CASE, '#', ')', '}', ']', ';', ',']
   53        | KW_IF parens delimited • else_chain
   54 else_chain: • KW_ELSE delimited
   55           | • KW_ELSE stmt_if

    KW_ELSE  shift, and go to state 96

    $default  reduce using rule 52 (stmt_if)

    else_chain  go to state 97


State 84

   56 stmt_case: • KW_CASE parens expr
   57 case_block: • stmt_case
   58           | • stmt_case case_block
   59 stmt_match: KW_MATCH parens '{' • case_block '}'

    KW_CASE  shift, and go to state 98

    stmt_case   go to state 99
    case_block  go to state 100


State 85

   72 opt_expr: expr •

    $default  reduce using rule 72 (opt_expr)


State 86

   60 stmt_for: KW_FOR '(' opt_expr • ';' opt_expr ';' opt_expr ')' expr

    ';'  shift, and go to state 101


State 87

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   25         | • '.'
   27 op_type: • OP_TYPE
   28        | • ':'
   32 prefix: • OP_AFFIX
   33       | • '+'
   34       | • '-'
   36 prefix_chain: • atom_chain
   37             | • prefix prefix_chain
   38 affix_chain: • prefix_chain
   39            | • affix_chain suffix
   40 rhs_expr: • affix_chain expr_tail
   41         | • const expr_tail
   44 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   45 empty_decl: • lhs_expr op_type type_expr
   46 assignment: • lhs_expr OP_ASSIGN rhs_expr
   47 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   48 bare_name: • lhs_expr op_type
   49 bare_type: • op_type type_expr
   50 bare_val: • OP_ASSIGN rhs_expr
   51 bare_expr: • rhs_expr
   52 stmt_if: • KW_IF parens delimited
   53        | • KW_IF parens delimited else_chain
   59 stmt_match: • KW_MATCH parens '{' case_block '}'
   60 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   61 expr: • full_decl
   62     | • empty_decl
   63     | • assignment
   64     | • typed_val
   65     | • bare_name
   66     | • bare_type
   67     | • bare_val
   68     | • bare_expr
   69     | • stmt_if
   70     | • stmt_match
   71     | • stmt_for
   77 expr_tuple: ε •  [')', ']']
   78           | • expr
   79           | • expr ',' expr_tuple
   79           | expr ',' • expr_tuple

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    $default  reduce using rule 77 (expr_tuple)

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 60
    expr_tuple    go to state 102


State 88

   10 parens: '(' expr_tuple ')' •

    $default  reduce using rule 10 (parens)


State 89

   11 braces: '{' expr_block '}' •

    $default  reduce using rule 11 (braces)


State 90

   12 bracks: '[' expr_tuple ']' •

    $default  reduce using rule 12 (bracks)


State 91

   42 expr_tail: op_bin rhs_expr •

    $default  reduce using rule 42 (expr_tail)


State 92

   46 assignment: lhs_expr OP_ASSIGN rhs_expr •

    $default  reduce using rule 46 (assignment)


State 93

   44 full_decl: lhs_expr op_type type_expr • OP_ASSIGN rhs_expr
   45 empty_decl: lhs_expr op_type type_expr •  [$end, KW_CASE, '#', ')', '}', ']', ';', ',']

    OP_ASSIGN  shift, and go to state 103

    $default  reduce using rule 45 (empty_decl)


State 94

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   32 prefix: • OP_AFFIX
   33       | • '+'
   34       | • '-'
   36 prefix_chain: • atom_chain
   37             | • prefix prefix_chain
   38 affix_chain: • prefix_chain
   39            | • affix_chain suffix
   40 rhs_expr: • affix_chain expr_tail
   41         | • const expr_tail
   47 typed_val: op_type type_expr OP_ASSIGN • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 53
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 54
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 104


State 95

   76 expr_block: expr ';' expr_block •

    $default  reduce using rule 76 (expr_block)


State 96

   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 delimited: • parens
   14          | • braces
   15          | • bracks
   52 stmt_if: • KW_IF parens delimited
   53        | • KW_IF parens delimited else_chain
   54 else_chain: KW_ELSE • delimited
   55           | KW_ELSE • stmt_if

    KW_IF  shift, and go to state 15
    '('    shift, and go to state 19
    '{'    shift, and go to state 20
    '['    shift, and go to state 21

    parens     go to state 80
    braces     go to state 81
    bracks     go to state 82
    delimited  go to state 105
    stmt_if    go to state 106


State 97

   53 stmt_if: KW_IF parens delimited else_chain •

    $default  reduce using rule 53 (stmt_if)


State 98

   10 parens: • '(' expr_tuple ')'
   56 stmt_case: KW_CASE • parens expr

    '('  shift, and go to state 19

    parens  go to state 107


State 99

   56 stmt_case: • KW_CASE parens expr
   57 case_block: • stmt_case
   57           | stmt_case •  ['}']
   58           | • stmt_case case_block
   58           | stmt_case • case_block

    KW_CASE  shift, and go to state 98

    $default  reduce using rule 57 (case_block)

    stmt_case   go to state 99
    case_block  go to state 108


State 100

   59 stmt_match: KW_MATCH parens '{' case_block • '}'

    '}'  shift, and go to state 109


State 101

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   25         | • '.'
   27 op_type: • OP_TYPE
   28        | • ':'
   32 prefix: • OP_AFFIX
   33       | • '+'
   34       | • '-'
   36 prefix_chain: • atom_chain
   37             | • prefix prefix_chain
   38 affix_chain: • prefix_chain
   39            | • affix_chain suffix
   40 rhs_expr: • affix_chain expr_tail
   41         | • const expr_tail
   44 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   45 empty_decl: • lhs_expr op_type type_expr
   46 assignment: • lhs_expr OP_ASSIGN rhs_expr
   47 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   48 bare_name: • lhs_expr op_type
   49 bare_type: • op_type type_expr
   50 bare_val: • OP_ASSIGN rhs_expr
   51 bare_expr: • rhs_expr
   52 stmt_if: • KW_IF parens delimited
   53        | • KW_IF parens delimited else_chain
   59 stmt_match: • KW_MATCH parens '{' case_block '}'
   60 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   60         | KW_FOR '(' opt_expr ';' • opt_expr ';' opt_expr ')' expr
   61 expr: • full_decl
   62     | • empty_decl
   63     | • assignment
   64     | • typed_val
   65     | • bare_name
   66     | • bare_type
   67     | • bare_val
   68     | • bare_expr
   69     | • stmt_if
   70     | • stmt_match
   71     | • stmt_for
   72 opt_expr: • expr
   73         | ε •  [';']

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    $default  reduce using rule 73 (opt_expr)

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 85
    opt_expr      go to state 110


State 102

   79 expr_tuple: expr ',' expr_tuple •

    $default  reduce using rule 79 (expr_tuple)


State 103

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   32 prefix: • OP_AFFIX
   33       | • '+'
   34       | • '-'
   36 prefix_chain: • atom_chain
   37             | • prefix prefix_chain
   38 affix_chain: • prefix_chain
   39            | • affix_chain suffix
   40 rhs_expr: • affix_chain expr_tail
   41         | • const expr_tail
   44 full_decl: lhs_expr op_type type_expr OP_ASSIGN • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 53
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 54
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 111


State 104

   47 typed_val: op_type type_expr OP_ASSIGN rhs_expr •

    $default  reduce using rule 47 (typed_val)


State 105

   54 else_chain: KW_ELSE delimited •

    $default  reduce using rule 54 (else_chain)


State 106

   55 else_chain: KW_ELSE stmt_if •

    $default  reduce using rule 55 (else_chain)


State 107

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   25         | • '.'
   27 op_type: • OP_TYPE
   28        | • ':'
   32 prefix: • OP_AFFIX
   33       | • '+'
   34       | • '-'
   36 prefix_chain: • atom_chain
   37             | • prefix prefix_chain
   38 affix_chain: • prefix_chain
   39            | • affix_chain suffix
   40 rhs_expr: • affix_chain expr_tail
   41         | • const expr_tail
   44 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   45 empty_decl: • lhs_expr op_type type_expr
   46 assignment: • lhs_expr OP_ASSIGN rhs_expr
   47 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   48 bare_name: • lhs_expr op_type
   49 bare_type: • op_type type_expr
   50 bare_val: • OP_ASSIGN rhs_expr
   51 bare_expr: • rhs_expr
   52 stmt_if: • KW_IF parens delimited
   53        | • KW_IF parens delimited else_chain
   56 stmt_case: KW_CASE parens • expr
   59 stmt_match: • KW_MATCH parens '{' case_block '}'
   60 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   61 expr: • full_decl
   62     | • empty_decl
   63     | • assignment
   64     | • typed_val
   65     | • bare_name
   66     | • bare_type
   67     | • bare_val
   68     | • bare_expr
   69     | • stmt_if
   70     | • stmt_match
   71     | • stmt_for

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 112


State 108

   58 case_block: stmt_case case_block •

    $default  reduce using rule 58 (case_block)


State 109

   59 stmt_match: KW_MATCH parens '{' case_block '}' •

    $default  reduce using rule 59 (stmt_match)


State 110

   60 stmt_for: KW_FOR '(' opt_expr ';' opt_expr • ';' opt_expr ')' expr

    ';'  shift, and go to state 113


State 111

   44 full_decl: lhs_expr op_type type_expr OP_ASSIGN rhs_expr •

    $default  reduce using rule 44 (full_decl)


State 112

   56 stmt_case: KW_CASE parens expr •

    $default  reduce using rule 56 (stmt_case)


State 113

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   25         | • '.'
   27 op_type: • OP_TYPE
   28        | • ':'
   32 prefix: • OP_AFFIX
   33       | • '+'
   34       | • '-'
   36 prefix_chain: • atom_chain
   37             | • prefix prefix_chain
   38 affix_chain: • prefix_chain
   39            | • affix_chain suffix
   40 rhs_expr: • affix_chain expr_tail
   41         | • const expr_tail
   44 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   45 empty_decl: • lhs_expr op_type type_expr
   46 assignment: • lhs_expr OP_ASSIGN rhs_expr
   47 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   48 bare_name: • lhs_expr op_type
   49 bare_type: • op_type type_expr
   50 bare_val: • OP_ASSIGN rhs_expr
   51 bare_expr: • rhs_expr
   52 stmt_if: • KW_IF parens delimited
   53        | • KW_IF parens delimited else_chain
   59 stmt_match: • KW_MATCH parens '{' case_block '}'
   60 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   60         | KW_FOR '(' opt_expr ';' opt_expr ';' • opt_expr ')' expr
   61 expr: • full_decl
   62     | • empty_decl
   63     | • assignment
   64     | • typed_val
   65     | • bare_name
   66     | • bare_type
   67     | • bare_val
   68     | • bare_expr
   69     | • stmt_if
   70     | • stmt_match
   71     | • stmt_for
   72 opt_expr: • expr
   73         | ε •  [')']

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    $default  reduce using rule 73 (opt_expr)

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 85
    opt_expr      go to state 114


State 114

   60 stmt_for: KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr • ')' expr

    ')'  shift, and go to state 115


State 115

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   16 expr_atom: • ident
   17          | • parens
   18          | • braces
   19          | • bracks
   20 atom_link: • expr_atom
   21          | • '.' expr_atom
   22 atom_chain: • atom_link
   23           | • atom_link atom_chain
   24 lhs_expr: • atom_chain
   25         | • '.'
   27 op_type: • OP_TYPE
   28        | • ':'
   32 prefix: • OP_AFFIX
   33       | • '+'
   34       | • '-'
   36 prefix_chain: • atom_chain
   37             | • prefix prefix_chain
   38 affix_chain: • prefix_chain
   39            | • affix_chain suffix
   40 rhs_expr: • affix_chain expr_tail
   41         | • const expr_tail
   44 full_decl: • lhs_expr op_type type_expr OP_ASSIGN rhs_expr
   45 empty_decl: • lhs_expr op_type type_expr
   46 assignment: • lhs_expr OP_ASSIGN rhs_expr
   47 typed_val: • op_type type_expr OP_ASSIGN rhs_expr
   48 bare_name: • lhs_expr op_type
   49 bare_type: • op_type type_expr
   50 bare_val: • OP_ASSIGN rhs_expr
   51 bare_expr: • rhs_expr
   52 stmt_if: • KW_IF parens delimited
   53        | • KW_IF parens delimited else_chain
   59 stmt_match: • KW_MATCH parens '{' case_block '}'
   60 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr
   60         | KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' • expr
   61 expr: • full_decl
   62     | • empty_decl
   63     | • assignment
   64     | • typed_val
   65     | • bare_name
   66     | • bare_type
   67     | • bare_val
   68     | • bare_expr
   69     | • stmt_if
   70     | • stmt_match
   71     | • stmt_for

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    ':'         shift, and go to state 23
    '+'         shift, and go to state 24
    '-'         shift, and go to state 25

    const         go to state 26
    ident         go to state 27
    parens        go to state 28
    braces        go to state 29
    bracks        go to state 30
    expr_atom     go to state 31
    atom_link     go to state 32
    atom_chain    go to state 33
    lhs_expr      go to state 34
    op_type       go to state 35
    prefix        go to state 36
    prefix_chain  go to state 37
    affix_chain   go to state 38
    rhs_expr      go to state 39
    full_decl     go to state 40
    empty_decl    go to state 41
    assignment    go to state 42
    typed_val     go to state 43
    bare_name     go to state 44
    bare_type     go to state 45
    bare_val      go to state 46
    bare_expr     go to state 47
    stmt_if       go to state 48
    stmt_match    go to state 49
    stmt_for      go to state 50
    expr          go to state 116


State 116

   60 stmt_for: KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' expr •

    $default  reduce using rule 60 (stmt_for)
