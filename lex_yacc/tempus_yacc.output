Grammar

    0 $accept: program $end

    1 program: section
    2        | section program

    3 section: marker expr_block

    4 marker: '#' TOK_IDENT

    5 const: TOK_INT
    6      | TOK_FLOAT
    7      | TOK_STRING

    8 ident: '@' TOK_IDENT
    9      | TOK_IDENT

   10 parens: '(' expr_tuple ')'

   11 braces: '{' expr_block '}'

   12 bracks: '[' expr_tuple ']'

   13 expr_atom: ident
   14          | parens
   15          | braces
   16          | bracks

   17 atom_link: expr_atom
   18          | '.' expr_atom

   19 atom_chain: atom_link
   20           | atom_link atom_chain

   21 lhs_expr: atom_chain

   22 type_expr: atom_chain

   23 op_bin: OP_BIN
   24       | '+'
   25       | '-'

   26 prefix: OP_AFFIX
   27       | '+'
   28       | '-'

   29 suffix: OP_AFFIX

   30 prefix_chain: atom_chain
   31             | prefix prefix_chain

   32 affix_chain: prefix_chain
   33            | affix_chain suffix

   34 rhs_expr: affix_chain expr_tail
   35         | const expr_tail

   36 expr_tail: op_bin rhs_expr
   37          | ε

   38 full_decl: lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr

   39 empty_decl: lhs_expr OP_TYPE type_expr

   40 assignment: lhs_expr OP_ASSIGN rhs_expr

   41 typed_val: OP_TYPE type_expr OP_ASSIGN rhs_expr

   42 bare_name: lhs_expr OP_TYPE

   43 bare_type: OP_TYPE type_expr

   44 bare_val: OP_ASSIGN rhs_expr

   45 bare_expr: rhs_expr

   46 stmt_if: KW_IF parens braces
   47        | KW_IF parens braces else_chain

   48 else_chain: KW_ELSE braces
   49           | KW_ELSE stmt_if

   50 stmt_case: KW_CASE parens braces

   51 case_block: stmt_case
   52           | stmt_case case_block

   53 stmt_match: KW_MATCH parens '{' case_block '}'

   54 stmt_for: KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces

   55 expr: full_decl
   56     | empty_decl
   57     | assignment
   58     | typed_val
   59     | bare_name
   60     | bare_type
   61     | bare_val
   62     | bare_expr
   63     | stmt_if
   64     | stmt_match
   65     | stmt_for

   66 opt_expr: expr
   67         | ε

   68 expr_block: ε
   69           | expr
   70           | expr ';' expr_block

   71 expr_tuple: ε
   72           | expr
   73           | expr ',' expr_tuple


Terminals, with rules where they appear

    $end (0) 0
    '#' (35) 4
    '(' (40) 10 54
    ')' (41) 10 54
    '+' (43) 24 27
    ',' (44) 73
    '-' (45) 25 28
    '.' (46) 18
    ';' (59) 54 70
    '@' (64) 8
    '[' (91) 12
    ']' (93) 12
    '{' (123) 11 53
    '}' (125) 11 53
    error (256)
    TOK_IDENT <val_str> (258) 4 8 9
    TOK_INT <val_int> (259) 5
    TOK_FLOAT <val_float> (260) 6
    TOK_STRING <val_str> (261) 7
    OP_TYPE <val_str> (262) 38 39 41 42 43
    OP_ASSIGN <val_str> (263) 38 40 41 44
    OP_BIN <val_str> (264) 23
    OP_AFFIX <val_str> (265) 26 29
    KW_IF (266) 46 47
    KW_ELSE (267) 48 49
    KW_MATCH (268) 53
    KW_CASE (269) 50
    KW_FOR (270) 54


Nonterminals, with rules where they appear

    $accept (29)
        on left: 0
    program (30)
        on left: 1 2
        on right: 0 2
    section (31)
        on left: 3
        on right: 1 2
    marker (32)
        on left: 4
        on right: 3
    const (33)
        on left: 5 6 7
        on right: 35
    ident (34)
        on left: 8 9
        on right: 13
    parens (35)
        on left: 10
        on right: 14 46 47 50 53
    braces (36)
        on left: 11
        on right: 15 46 47 48 50 54
    bracks (37)
        on left: 12
        on right: 16
    expr_atom (38)
        on left: 13 14 15 16
        on right: 17 18
    atom_link (39)
        on left: 17 18
        on right: 19 20
    atom_chain (40)
        on left: 19 20
        on right: 20 21 22 30
    lhs_expr (41)
        on left: 21
        on right: 38 39 40 42
    type_expr (42)
        on left: 22
        on right: 38 39 41 43
    op_bin (43)
        on left: 23 24 25
        on right: 36
    prefix (44)
        on left: 26 27 28
        on right: 31
    suffix (45)
        on left: 29
        on right: 33
    prefix_chain (46)
        on left: 30 31
        on right: 31 32
    affix_chain (47)
        on left: 32 33
        on right: 33 34
    rhs_expr (48)
        on left: 34 35
        on right: 36 38 40 41 44 45
    expr_tail (49)
        on left: 36 37
        on right: 34 35
    full_decl (50)
        on left: 38
        on right: 55
    empty_decl (51)
        on left: 39
        on right: 56
    assignment (52)
        on left: 40
        on right: 57
    typed_val (53)
        on left: 41
        on right: 58
    bare_name (54)
        on left: 42
        on right: 59
    bare_type (55)
        on left: 43
        on right: 60
    bare_val (56)
        on left: 44
        on right: 61
    bare_expr (57)
        on left: 45
        on right: 62
    stmt_if (58)
        on left: 46 47
        on right: 49 63
    else_chain (59)
        on left: 48 49
        on right: 47
    stmt_case (60)
        on left: 50
        on right: 51 52
    case_block (61)
        on left: 51 52
        on right: 52 53
    stmt_match (62)
        on left: 53
        on right: 64
    stmt_for (63)
        on left: 54
        on right: 65
    expr (64)
        on left: 55 56 57 58 59 60 61 62 63 64 65
        on right: 66 69 70 72 73
    opt_expr (65)
        on left: 66 67
        on right: 54
    expr_block (66)
        on left: 68 69 70
        on right: 3 11 70
    expr_tuple (67)
        on left: 71 72 73
        on right: 10 12 73


State 0

    0 $accept: • program $end
    1 program: • section
    2        | • section program
    3 section: • marker expr_block
    4 marker: • '#' TOK_IDENT

    '#'  shift, and go to state 1

    program  go to state 2
    section  go to state 3
    marker   go to state 4


State 1

    4 marker: '#' • TOK_IDENT

    TOK_IDENT  shift, and go to state 5


State 2

    0 $accept: program • $end

    $end  shift, and go to state 6


State 3

    1 program: • section
    1        | section •  [$end]
    2        | • section program
    2        | section • program
    3 section: • marker expr_block
    4 marker: • '#' TOK_IDENT

    '#'  shift, and go to state 1

    $default  reduce using rule 1 (program)

    program  go to state 7
    section  go to state 3
    marker   go to state 4


State 4

    3 section: marker • expr_block
    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 lhs_expr: • atom_chain
   26 prefix: • OP_AFFIX
   27       | • '+'
   28       | • '-'
   30 prefix_chain: • atom_chain
   31             | • prefix prefix_chain
   32 affix_chain: • prefix_chain
   33            | • affix_chain suffix
   34 rhs_expr: • affix_chain expr_tail
   35         | • const expr_tail
   38 full_decl: • lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr
   39 empty_decl: • lhs_expr OP_TYPE type_expr
   40 assignment: • lhs_expr OP_ASSIGN rhs_expr
   41 typed_val: • OP_TYPE type_expr OP_ASSIGN rhs_expr
   42 bare_name: • lhs_expr OP_TYPE
   43 bare_type: • OP_TYPE type_expr
   44 bare_val: • OP_ASSIGN rhs_expr
   45 bare_expr: • rhs_expr
   46 stmt_if: • KW_IF parens braces
   47        | • KW_IF parens braces else_chain
   53 stmt_match: • KW_MATCH parens '{' case_block '}'
   54 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces
   55 expr: • full_decl
   56     | • empty_decl
   57     | • assignment
   58     | • typed_val
   59     | • bare_name
   60     | • bare_type
   61     | • bare_val
   62     | • bare_expr
   63     | • stmt_if
   64     | • stmt_match
   65     | • stmt_for
   68 expr_block: ε •  [$end, '#']
   69           | • expr
   70           | • expr ';' expr_block

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 23
    '-'         shift, and go to state 24

    $default  reduce using rule 68 (expr_block)

    const         go to state 25
    ident         go to state 26
    parens        go to state 27
    braces        go to state 28
    bracks        go to state 29
    expr_atom     go to state 30
    atom_link     go to state 31
    atom_chain    go to state 32
    lhs_expr      go to state 33
    prefix        go to state 34
    prefix_chain  go to state 35
    affix_chain   go to state 36
    rhs_expr      go to state 37
    full_decl     go to state 38
    empty_decl    go to state 39
    assignment    go to state 40
    typed_val     go to state 41
    bare_name     go to state 42
    bare_type     go to state 43
    bare_val      go to state 44
    bare_expr     go to state 45
    stmt_if       go to state 46
    stmt_match    go to state 47
    stmt_for      go to state 48
    expr          go to state 49
    expr_block    go to state 50


State 5

    4 marker: '#' TOK_IDENT •

    $default  reduce using rule 4 (marker)


State 6

    0 $accept: program $end •

    $default  accept


State 7

    2 program: section program •

    $default  reduce using rule 2 (program)


State 8

    9 ident: TOK_IDENT •

    $default  reduce using rule 9 (ident)


State 9

    5 const: TOK_INT •

    $default  reduce using rule 5 (const)


State 10

    6 const: TOK_FLOAT •

    $default  reduce using rule 6 (const)


State 11

    7 const: TOK_STRING •

    $default  reduce using rule 7 (const)


State 12

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   22 type_expr: • atom_chain
   41 typed_val: OP_TYPE • type_expr OP_ASSIGN rhs_expr
   43 bare_type: OP_TYPE • type_expr

    TOK_IDENT  shift, and go to state 8
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21
    '.'        shift, and go to state 22

    ident       go to state 26
    parens      go to state 27
    braces      go to state 28
    bracks      go to state 29
    expr_atom   go to state 30
    atom_link   go to state 31
    atom_chain  go to state 51
    type_expr   go to state 52


State 13

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   26 prefix: • OP_AFFIX
   27       | • '+'
   28       | • '-'
   30 prefix_chain: • atom_chain
   31             | • prefix prefix_chain
   32 affix_chain: • prefix_chain
   33            | • affix_chain suffix
   34 rhs_expr: • affix_chain expr_tail
   35         | • const expr_tail
   44 bare_val: OP_ASSIGN • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 23
    '-'         shift, and go to state 24

    const         go to state 25
    ident         go to state 26
    parens        go to state 27
    braces        go to state 28
    bracks        go to state 29
    expr_atom     go to state 30
    atom_link     go to state 31
    atom_chain    go to state 53
    prefix        go to state 34
    prefix_chain  go to state 35
    affix_chain   go to state 36
    rhs_expr      go to state 54


State 14

   26 prefix: OP_AFFIX •

    $default  reduce using rule 26 (prefix)


State 15

   10 parens: • '(' expr_tuple ')'
   46 stmt_if: KW_IF • parens braces
   47        | KW_IF • parens braces else_chain

    '('  shift, and go to state 19

    parens  go to state 55


State 16

   10 parens: • '(' expr_tuple ')'
   53 stmt_match: KW_MATCH • parens '{' case_block '}'

    '('  shift, and go to state 19

    parens  go to state 56


State 17

   54 stmt_for: KW_FOR • '(' opt_expr ';' opt_expr ';' opt_expr ')' braces

    '('  shift, and go to state 57


State 18

    8 ident: '@' • TOK_IDENT

    TOK_IDENT  shift, and go to state 58


State 19

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   10       | '(' • expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 lhs_expr: • atom_chain
   26 prefix: • OP_AFFIX
   27       | • '+'
   28       | • '-'
   30 prefix_chain: • atom_chain
   31             | • prefix prefix_chain
   32 affix_chain: • prefix_chain
   33            | • affix_chain suffix
   34 rhs_expr: • affix_chain expr_tail
   35         | • const expr_tail
   38 full_decl: • lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr
   39 empty_decl: • lhs_expr OP_TYPE type_expr
   40 assignment: • lhs_expr OP_ASSIGN rhs_expr
   41 typed_val: • OP_TYPE type_expr OP_ASSIGN rhs_expr
   42 bare_name: • lhs_expr OP_TYPE
   43 bare_type: • OP_TYPE type_expr
   44 bare_val: • OP_ASSIGN rhs_expr
   45 bare_expr: • rhs_expr
   46 stmt_if: • KW_IF parens braces
   47        | • KW_IF parens braces else_chain
   53 stmt_match: • KW_MATCH parens '{' case_block '}'
   54 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces
   55 expr: • full_decl
   56     | • empty_decl
   57     | • assignment
   58     | • typed_val
   59     | • bare_name
   60     | • bare_type
   61     | • bare_val
   62     | • bare_expr
   63     | • stmt_if
   64     | • stmt_match
   65     | • stmt_for
   71 expr_tuple: ε •  [')']
   72           | • expr
   73           | • expr ',' expr_tuple

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 23
    '-'         shift, and go to state 24

    $default  reduce using rule 71 (expr_tuple)

    const         go to state 25
    ident         go to state 26
    parens        go to state 27
    braces        go to state 28
    bracks        go to state 29
    expr_atom     go to state 30
    atom_link     go to state 31
    atom_chain    go to state 32
    lhs_expr      go to state 33
    prefix        go to state 34
    prefix_chain  go to state 35
    affix_chain   go to state 36
    rhs_expr      go to state 37
    full_decl     go to state 38
    empty_decl    go to state 39
    assignment    go to state 40
    typed_val     go to state 41
    bare_name     go to state 42
    bare_type     go to state 43
    bare_val      go to state 44
    bare_expr     go to state 45
    stmt_if       go to state 46
    stmt_match    go to state 47
    stmt_for      go to state 48
    expr          go to state 59
    expr_tuple    go to state 60


State 20

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   11       | '{' • expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 lhs_expr: • atom_chain
   26 prefix: • OP_AFFIX
   27       | • '+'
   28       | • '-'
   30 prefix_chain: • atom_chain
   31             | • prefix prefix_chain
   32 affix_chain: • prefix_chain
   33            | • affix_chain suffix
   34 rhs_expr: • affix_chain expr_tail
   35         | • const expr_tail
   38 full_decl: • lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr
   39 empty_decl: • lhs_expr OP_TYPE type_expr
   40 assignment: • lhs_expr OP_ASSIGN rhs_expr
   41 typed_val: • OP_TYPE type_expr OP_ASSIGN rhs_expr
   42 bare_name: • lhs_expr OP_TYPE
   43 bare_type: • OP_TYPE type_expr
   44 bare_val: • OP_ASSIGN rhs_expr
   45 bare_expr: • rhs_expr
   46 stmt_if: • KW_IF parens braces
   47        | • KW_IF parens braces else_chain
   53 stmt_match: • KW_MATCH parens '{' case_block '}'
   54 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces
   55 expr: • full_decl
   56     | • empty_decl
   57     | • assignment
   58     | • typed_val
   59     | • bare_name
   60     | • bare_type
   61     | • bare_val
   62     | • bare_expr
   63     | • stmt_if
   64     | • stmt_match
   65     | • stmt_for
   68 expr_block: ε •  ['}']
   69           | • expr
   70           | • expr ';' expr_block

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 23
    '-'         shift, and go to state 24

    $default  reduce using rule 68 (expr_block)

    const         go to state 25
    ident         go to state 26
    parens        go to state 27
    braces        go to state 28
    bracks        go to state 29
    expr_atom     go to state 30
    atom_link     go to state 31
    atom_chain    go to state 32
    lhs_expr      go to state 33
    prefix        go to state 34
    prefix_chain  go to state 35
    affix_chain   go to state 36
    rhs_expr      go to state 37
    full_decl     go to state 38
    empty_decl    go to state 39
    assignment    go to state 40
    typed_val     go to state 41
    bare_name     go to state 42
    bare_type     go to state 43
    bare_val      go to state 44
    bare_expr     go to state 45
    stmt_if       go to state 46
    stmt_match    go to state 47
    stmt_for      go to state 48
    expr          go to state 49
    expr_block    go to state 61


State 21

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   12       | '[' • expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 lhs_expr: • atom_chain
   26 prefix: • OP_AFFIX
   27       | • '+'
   28       | • '-'
   30 prefix_chain: • atom_chain
   31             | • prefix prefix_chain
   32 affix_chain: • prefix_chain
   33            | • affix_chain suffix
   34 rhs_expr: • affix_chain expr_tail
   35         | • const expr_tail
   38 full_decl: • lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr
   39 empty_decl: • lhs_expr OP_TYPE type_expr
   40 assignment: • lhs_expr OP_ASSIGN rhs_expr
   41 typed_val: • OP_TYPE type_expr OP_ASSIGN rhs_expr
   42 bare_name: • lhs_expr OP_TYPE
   43 bare_type: • OP_TYPE type_expr
   44 bare_val: • OP_ASSIGN rhs_expr
   45 bare_expr: • rhs_expr
   46 stmt_if: • KW_IF parens braces
   47        | • KW_IF parens braces else_chain
   53 stmt_match: • KW_MATCH parens '{' case_block '}'
   54 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces
   55 expr: • full_decl
   56     | • empty_decl
   57     | • assignment
   58     | • typed_val
   59     | • bare_name
   60     | • bare_type
   61     | • bare_val
   62     | • bare_expr
   63     | • stmt_if
   64     | • stmt_match
   65     | • stmt_for
   71 expr_tuple: ε •  [']']
   72           | • expr
   73           | • expr ',' expr_tuple

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 23
    '-'         shift, and go to state 24

    $default  reduce using rule 71 (expr_tuple)

    const         go to state 25
    ident         go to state 26
    parens        go to state 27
    braces        go to state 28
    bracks        go to state 29
    expr_atom     go to state 30
    atom_link     go to state 31
    atom_chain    go to state 32
    lhs_expr      go to state 33
    prefix        go to state 34
    prefix_chain  go to state 35
    affix_chain   go to state 36
    rhs_expr      go to state 37
    full_decl     go to state 38
    empty_decl    go to state 39
    assignment    go to state 40
    typed_val     go to state 41
    bare_name     go to state 42
    bare_type     go to state 43
    bare_val      go to state 44
    bare_expr     go to state 45
    stmt_if       go to state 46
    stmt_match    go to state 47
    stmt_for      go to state 48
    expr          go to state 59
    expr_tuple    go to state 62


State 22

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   18 atom_link: '.' • expr_atom

    TOK_IDENT  shift, and go to state 8
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21

    ident      go to state 26
    parens     go to state 27
    braces     go to state 28
    bracks     go to state 29
    expr_atom  go to state 63


State 23

   27 prefix: '+' •

    $default  reduce using rule 27 (prefix)


State 24

   28 prefix: '-' •

    $default  reduce using rule 28 (prefix)


State 25

   23 op_bin: • OP_BIN
   24       | • '+'
   25       | • '-'
   35 rhs_expr: const • expr_tail
   36 expr_tail: • op_bin rhs_expr
   37          | ε •  [$end, '#', ')', '}', ']', ';', ',']

    OP_BIN  shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66

    $default  reduce using rule 37 (expr_tail)

    op_bin     go to state 67
    expr_tail  go to state 68


State 26

   13 expr_atom: ident •

    $default  reduce using rule 13 (expr_atom)


State 27

   14 expr_atom: parens •

    $default  reduce using rule 14 (expr_atom)


State 28

   15 expr_atom: braces •

    $default  reduce using rule 15 (expr_atom)


State 29

   16 expr_atom: bracks •

    $default  reduce using rule 16 (expr_atom)


State 30

   17 atom_link: expr_atom •

    $default  reduce using rule 17 (atom_link)


State 31

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   19           | atom_link •  [$end, OP_TYPE, OP_ASSIGN, OP_BIN, OP_AFFIX, '#', ')', '}', ']', '+', '-', ';', ',']
   20           | • atom_link atom_chain
   20           | atom_link • atom_chain

    TOK_IDENT  shift, and go to state 8
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21
    '.'        shift, and go to state 22

    $default  reduce using rule 19 (atom_chain)

    ident       go to state 26
    parens      go to state 27
    braces      go to state 28
    bracks      go to state 29
    expr_atom   go to state 30
    atom_link   go to state 31
    atom_chain  go to state 69


State 32

   21 lhs_expr: atom_chain •  [OP_TYPE, OP_ASSIGN]
   30 prefix_chain: atom_chain •  [$end, OP_BIN, OP_AFFIX, '#', ')', '}', ']', '+', '-', ';', ',']

    OP_TYPE    reduce using rule 21 (lhs_expr)
    OP_ASSIGN  reduce using rule 21 (lhs_expr)
    $default   reduce using rule 30 (prefix_chain)


State 33

   38 full_decl: lhs_expr • OP_TYPE type_expr OP_ASSIGN rhs_expr
   39 empty_decl: lhs_expr • OP_TYPE type_expr
   40 assignment: lhs_expr • OP_ASSIGN rhs_expr
   42 bare_name: lhs_expr • OP_TYPE

    OP_TYPE    shift, and go to state 70
    OP_ASSIGN  shift, and go to state 71


State 34

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   26 prefix: • OP_AFFIX
   27       | • '+'
   28       | • '-'
   30 prefix_chain: • atom_chain
   31             | • prefix prefix_chain
   31             | prefix • prefix_chain

    TOK_IDENT  shift, and go to state 8
    OP_AFFIX   shift, and go to state 14
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21
    '.'        shift, and go to state 22
    '+'        shift, and go to state 23
    '-'        shift, and go to state 24

    ident         go to state 26
    parens        go to state 27
    braces        go to state 28
    bracks        go to state 29
    expr_atom     go to state 30
    atom_link     go to state 31
    atom_chain    go to state 53
    prefix        go to state 34
    prefix_chain  go to state 72


State 35

   32 affix_chain: prefix_chain •

    $default  reduce using rule 32 (affix_chain)


State 36

   23 op_bin: • OP_BIN
   24       | • '+'
   25       | • '-'
   29 suffix: • OP_AFFIX
   33 affix_chain: affix_chain • suffix
   34 rhs_expr: affix_chain • expr_tail
   36 expr_tail: • op_bin rhs_expr
   37          | ε •  [$end, '#', ')', '}', ']', ';', ',']

    OP_BIN    shift, and go to state 64
    OP_AFFIX  shift, and go to state 73
    '+'       shift, and go to state 65
    '-'       shift, and go to state 66

    $default  reduce using rule 37 (expr_tail)

    op_bin     go to state 67
    suffix     go to state 74
    expr_tail  go to state 75


State 37

   45 bare_expr: rhs_expr •

    $default  reduce using rule 45 (bare_expr)


State 38

   55 expr: full_decl •

    $default  reduce using rule 55 (expr)


State 39

   56 expr: empty_decl •

    $default  reduce using rule 56 (expr)


State 40

   57 expr: assignment •

    $default  reduce using rule 57 (expr)


State 41

   58 expr: typed_val •

    $default  reduce using rule 58 (expr)


State 42

   59 expr: bare_name •

    $default  reduce using rule 59 (expr)


State 43

   60 expr: bare_type •

    $default  reduce using rule 60 (expr)


State 44

   61 expr: bare_val •

    $default  reduce using rule 61 (expr)


State 45

   62 expr: bare_expr •

    $default  reduce using rule 62 (expr)


State 46

   63 expr: stmt_if •

    $default  reduce using rule 63 (expr)


State 47

   64 expr: stmt_match •

    $default  reduce using rule 64 (expr)


State 48

   65 expr: stmt_for •

    $default  reduce using rule 65 (expr)


State 49

   69 expr_block: expr •  [$end, '#', '}']
   70           | expr • ';' expr_block

    ';'  shift, and go to state 76

    $default  reduce using rule 69 (expr_block)


State 50

    3 section: marker expr_block •

    $default  reduce using rule 3 (section)


State 51

   22 type_expr: atom_chain •

    $default  reduce using rule 22 (type_expr)


State 52

   41 typed_val: OP_TYPE type_expr • OP_ASSIGN rhs_expr
   43 bare_type: OP_TYPE type_expr •  [$end, '#', ')', '}', ']', ';', ',']

    OP_ASSIGN  shift, and go to state 77

    $default  reduce using rule 43 (bare_type)


State 53

   30 prefix_chain: atom_chain •

    $default  reduce using rule 30 (prefix_chain)


State 54

   44 bare_val: OP_ASSIGN rhs_expr •

    $default  reduce using rule 44 (bare_val)


State 55

   11 braces: • '{' expr_block '}'
   46 stmt_if: KW_IF parens • braces
   47        | KW_IF parens • braces else_chain

    '{'  shift, and go to state 20

    braces  go to state 78


State 56

   53 stmt_match: KW_MATCH parens • '{' case_block '}'

    '{'  shift, and go to state 79


State 57

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 lhs_expr: • atom_chain
   26 prefix: • OP_AFFIX
   27       | • '+'
   28       | • '-'
   30 prefix_chain: • atom_chain
   31             | • prefix prefix_chain
   32 affix_chain: • prefix_chain
   33            | • affix_chain suffix
   34 rhs_expr: • affix_chain expr_tail
   35         | • const expr_tail
   38 full_decl: • lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr
   39 empty_decl: • lhs_expr OP_TYPE type_expr
   40 assignment: • lhs_expr OP_ASSIGN rhs_expr
   41 typed_val: • OP_TYPE type_expr OP_ASSIGN rhs_expr
   42 bare_name: • lhs_expr OP_TYPE
   43 bare_type: • OP_TYPE type_expr
   44 bare_val: • OP_ASSIGN rhs_expr
   45 bare_expr: • rhs_expr
   46 stmt_if: • KW_IF parens braces
   47        | • KW_IF parens braces else_chain
   53 stmt_match: • KW_MATCH parens '{' case_block '}'
   54 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces
   54         | KW_FOR '(' • opt_expr ';' opt_expr ';' opt_expr ')' braces
   55 expr: • full_decl
   56     | • empty_decl
   57     | • assignment
   58     | • typed_val
   59     | • bare_name
   60     | • bare_type
   61     | • bare_val
   62     | • bare_expr
   63     | • stmt_if
   64     | • stmt_match
   65     | • stmt_for
   66 opt_expr: • expr
   67         | ε •  [';']

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 23
    '-'         shift, and go to state 24

    $default  reduce using rule 67 (opt_expr)

    const         go to state 25
    ident         go to state 26
    parens        go to state 27
    braces        go to state 28
    bracks        go to state 29
    expr_atom     go to state 30
    atom_link     go to state 31
    atom_chain    go to state 32
    lhs_expr      go to state 33
    prefix        go to state 34
    prefix_chain  go to state 35
    affix_chain   go to state 36
    rhs_expr      go to state 37
    full_decl     go to state 38
    empty_decl    go to state 39
    assignment    go to state 40
    typed_val     go to state 41
    bare_name     go to state 42
    bare_type     go to state 43
    bare_val      go to state 44
    bare_expr     go to state 45
    stmt_if       go to state 46
    stmt_match    go to state 47
    stmt_for      go to state 48
    expr          go to state 80
    opt_expr      go to state 81


State 58

    8 ident: '@' TOK_IDENT •

    $default  reduce using rule 8 (ident)


State 59

   72 expr_tuple: expr •  [')', ']']
   73           | expr • ',' expr_tuple

    ','  shift, and go to state 82

    $default  reduce using rule 72 (expr_tuple)


State 60

   10 parens: '(' expr_tuple • ')'

    ')'  shift, and go to state 83


State 61

   11 braces: '{' expr_block • '}'

    '}'  shift, and go to state 84


State 62

   12 bracks: '[' expr_tuple • ']'

    ']'  shift, and go to state 85


State 63

   18 atom_link: '.' expr_atom •

    $default  reduce using rule 18 (atom_link)


State 64

   23 op_bin: OP_BIN •

    $default  reduce using rule 23 (op_bin)


State 65

   24 op_bin: '+' •

    $default  reduce using rule 24 (op_bin)


State 66

   25 op_bin: '-' •

    $default  reduce using rule 25 (op_bin)


State 67

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   26 prefix: • OP_AFFIX
   27       | • '+'
   28       | • '-'
   30 prefix_chain: • atom_chain
   31             | • prefix prefix_chain
   32 affix_chain: • prefix_chain
   33            | • affix_chain suffix
   34 rhs_expr: • affix_chain expr_tail
   35         | • const expr_tail
   36 expr_tail: op_bin • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 23
    '-'         shift, and go to state 24

    const         go to state 25
    ident         go to state 26
    parens        go to state 27
    braces        go to state 28
    bracks        go to state 29
    expr_atom     go to state 30
    atom_link     go to state 31
    atom_chain    go to state 53
    prefix        go to state 34
    prefix_chain  go to state 35
    affix_chain   go to state 36
    rhs_expr      go to state 86


State 68

   35 rhs_expr: const expr_tail •

    $default  reduce using rule 35 (rhs_expr)


State 69

   20 atom_chain: atom_link atom_chain •

    $default  reduce using rule 20 (atom_chain)


State 70

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   22 type_expr: • atom_chain
   38 full_decl: lhs_expr OP_TYPE • type_expr OP_ASSIGN rhs_expr
   39 empty_decl: lhs_expr OP_TYPE • type_expr
   42 bare_name: lhs_expr OP_TYPE •  [$end, '#', ')', '}', ']', ';', ',']

    TOK_IDENT  shift, and go to state 8
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21
    '.'        shift, and go to state 22

    $default  reduce using rule 42 (bare_name)

    ident       go to state 26
    parens      go to state 27
    braces      go to state 28
    bracks      go to state 29
    expr_atom   go to state 30
    atom_link   go to state 31
    atom_chain  go to state 51
    type_expr   go to state 87


State 71

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   26 prefix: • OP_AFFIX
   27       | • '+'
   28       | • '-'
   30 prefix_chain: • atom_chain
   31             | • prefix prefix_chain
   32 affix_chain: • prefix_chain
   33            | • affix_chain suffix
   34 rhs_expr: • affix_chain expr_tail
   35         | • const expr_tail
   40 assignment: lhs_expr OP_ASSIGN • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 23
    '-'         shift, and go to state 24

    const         go to state 25
    ident         go to state 26
    parens        go to state 27
    braces        go to state 28
    bracks        go to state 29
    expr_atom     go to state 30
    atom_link     go to state 31
    atom_chain    go to state 53
    prefix        go to state 34
    prefix_chain  go to state 35
    affix_chain   go to state 36
    rhs_expr      go to state 88


State 72

   31 prefix_chain: prefix prefix_chain •

    $default  reduce using rule 31 (prefix_chain)


State 73

   29 suffix: OP_AFFIX •

    $default  reduce using rule 29 (suffix)


State 74

   33 affix_chain: affix_chain suffix •

    $default  reduce using rule 33 (affix_chain)


State 75

   34 rhs_expr: affix_chain expr_tail •

    $default  reduce using rule 34 (rhs_expr)


State 76

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 lhs_expr: • atom_chain
   26 prefix: • OP_AFFIX
   27       | • '+'
   28       | • '-'
   30 prefix_chain: • atom_chain
   31             | • prefix prefix_chain
   32 affix_chain: • prefix_chain
   33            | • affix_chain suffix
   34 rhs_expr: • affix_chain expr_tail
   35         | • const expr_tail
   38 full_decl: • lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr
   39 empty_decl: • lhs_expr OP_TYPE type_expr
   40 assignment: • lhs_expr OP_ASSIGN rhs_expr
   41 typed_val: • OP_TYPE type_expr OP_ASSIGN rhs_expr
   42 bare_name: • lhs_expr OP_TYPE
   43 bare_type: • OP_TYPE type_expr
   44 bare_val: • OP_ASSIGN rhs_expr
   45 bare_expr: • rhs_expr
   46 stmt_if: • KW_IF parens braces
   47        | • KW_IF parens braces else_chain
   53 stmt_match: • KW_MATCH parens '{' case_block '}'
   54 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces
   55 expr: • full_decl
   56     | • empty_decl
   57     | • assignment
   58     | • typed_val
   59     | • bare_name
   60     | • bare_type
   61     | • bare_val
   62     | • bare_expr
   63     | • stmt_if
   64     | • stmt_match
   65     | • stmt_for
   68 expr_block: ε •  [$end, '#', '}']
   69           | • expr
   70           | • expr ';' expr_block
   70           | expr ';' • expr_block

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 23
    '-'         shift, and go to state 24

    $default  reduce using rule 68 (expr_block)

    const         go to state 25
    ident         go to state 26
    parens        go to state 27
    braces        go to state 28
    bracks        go to state 29
    expr_atom     go to state 30
    atom_link     go to state 31
    atom_chain    go to state 32
    lhs_expr      go to state 33
    prefix        go to state 34
    prefix_chain  go to state 35
    affix_chain   go to state 36
    rhs_expr      go to state 37
    full_decl     go to state 38
    empty_decl    go to state 39
    assignment    go to state 40
    typed_val     go to state 41
    bare_name     go to state 42
    bare_type     go to state 43
    bare_val      go to state 44
    bare_expr     go to state 45
    stmt_if       go to state 46
    stmt_match    go to state 47
    stmt_for      go to state 48
    expr          go to state 49
    expr_block    go to state 89


State 77

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   26 prefix: • OP_AFFIX
   27       | • '+'
   28       | • '-'
   30 prefix_chain: • atom_chain
   31             | • prefix prefix_chain
   32 affix_chain: • prefix_chain
   33            | • affix_chain suffix
   34 rhs_expr: • affix_chain expr_tail
   35         | • const expr_tail
   41 typed_val: OP_TYPE type_expr OP_ASSIGN • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 23
    '-'         shift, and go to state 24

    const         go to state 25
    ident         go to state 26
    parens        go to state 27
    braces        go to state 28
    bracks        go to state 29
    expr_atom     go to state 30
    atom_link     go to state 31
    atom_chain    go to state 53
    prefix        go to state 34
    prefix_chain  go to state 35
    affix_chain   go to state 36
    rhs_expr      go to state 90


State 78

   46 stmt_if: KW_IF parens braces •  [$end, '#', ')', '}', ']', ';', ',']
   47        | KW_IF parens braces • else_chain
   48 else_chain: • KW_ELSE braces
   49           | • KW_ELSE stmt_if

    KW_ELSE  shift, and go to state 91

    $default  reduce using rule 46 (stmt_if)

    else_chain  go to state 92


State 79

   50 stmt_case: • KW_CASE parens braces
   51 case_block: • stmt_case
   52           | • stmt_case case_block
   53 stmt_match: KW_MATCH parens '{' • case_block '}'

    KW_CASE  shift, and go to state 93

    stmt_case   go to state 94
    case_block  go to state 95


State 80

   66 opt_expr: expr •

    $default  reduce using rule 66 (opt_expr)


State 81

   54 stmt_for: KW_FOR '(' opt_expr • ';' opt_expr ';' opt_expr ')' braces

    ';'  shift, and go to state 96


State 82

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 lhs_expr: • atom_chain
   26 prefix: • OP_AFFIX
   27       | • '+'
   28       | • '-'
   30 prefix_chain: • atom_chain
   31             | • prefix prefix_chain
   32 affix_chain: • prefix_chain
   33            | • affix_chain suffix
   34 rhs_expr: • affix_chain expr_tail
   35         | • const expr_tail
   38 full_decl: • lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr
   39 empty_decl: • lhs_expr OP_TYPE type_expr
   40 assignment: • lhs_expr OP_ASSIGN rhs_expr
   41 typed_val: • OP_TYPE type_expr OP_ASSIGN rhs_expr
   42 bare_name: • lhs_expr OP_TYPE
   43 bare_type: • OP_TYPE type_expr
   44 bare_val: • OP_ASSIGN rhs_expr
   45 bare_expr: • rhs_expr
   46 stmt_if: • KW_IF parens braces
   47        | • KW_IF parens braces else_chain
   53 stmt_match: • KW_MATCH parens '{' case_block '}'
   54 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces
   55 expr: • full_decl
   56     | • empty_decl
   57     | • assignment
   58     | • typed_val
   59     | • bare_name
   60     | • bare_type
   61     | • bare_val
   62     | • bare_expr
   63     | • stmt_if
   64     | • stmt_match
   65     | • stmt_for
   71 expr_tuple: ε •  [')', ']']
   72           | • expr
   73           | • expr ',' expr_tuple
   73           | expr ',' • expr_tuple

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 23
    '-'         shift, and go to state 24

    $default  reduce using rule 71 (expr_tuple)

    const         go to state 25
    ident         go to state 26
    parens        go to state 27
    braces        go to state 28
    bracks        go to state 29
    expr_atom     go to state 30
    atom_link     go to state 31
    atom_chain    go to state 32
    lhs_expr      go to state 33
    prefix        go to state 34
    prefix_chain  go to state 35
    affix_chain   go to state 36
    rhs_expr      go to state 37
    full_decl     go to state 38
    empty_decl    go to state 39
    assignment    go to state 40
    typed_val     go to state 41
    bare_name     go to state 42
    bare_type     go to state 43
    bare_val      go to state 44
    bare_expr     go to state 45
    stmt_if       go to state 46
    stmt_match    go to state 47
    stmt_for      go to state 48
    expr          go to state 59
    expr_tuple    go to state 97


State 83

   10 parens: '(' expr_tuple ')' •

    $default  reduce using rule 10 (parens)


State 84

   11 braces: '{' expr_block '}' •

    $default  reduce using rule 11 (braces)


State 85

   12 bracks: '[' expr_tuple ']' •

    $default  reduce using rule 12 (bracks)


State 86

   36 expr_tail: op_bin rhs_expr •

    $default  reduce using rule 36 (expr_tail)


State 87

   38 full_decl: lhs_expr OP_TYPE type_expr • OP_ASSIGN rhs_expr
   39 empty_decl: lhs_expr OP_TYPE type_expr •  [$end, '#', ')', '}', ']', ';', ',']

    OP_ASSIGN  shift, and go to state 98

    $default  reduce using rule 39 (empty_decl)


State 88

   40 assignment: lhs_expr OP_ASSIGN rhs_expr •

    $default  reduce using rule 40 (assignment)


State 89

   70 expr_block: expr ';' expr_block •

    $default  reduce using rule 70 (expr_block)


State 90

   41 typed_val: OP_TYPE type_expr OP_ASSIGN rhs_expr •

    $default  reduce using rule 41 (typed_val)


State 91

   11 braces: • '{' expr_block '}'
   46 stmt_if: • KW_IF parens braces
   47        | • KW_IF parens braces else_chain
   48 else_chain: KW_ELSE • braces
   49           | KW_ELSE • stmt_if

    KW_IF  shift, and go to state 15
    '{'    shift, and go to state 20

    braces   go to state 99
    stmt_if  go to state 100


State 92

   47 stmt_if: KW_IF parens braces else_chain •

    $default  reduce using rule 47 (stmt_if)


State 93

   10 parens: • '(' expr_tuple ')'
   50 stmt_case: KW_CASE • parens braces

    '('  shift, and go to state 19

    parens  go to state 101


State 94

   50 stmt_case: • KW_CASE parens braces
   51 case_block: • stmt_case
   51           | stmt_case •  ['}']
   52           | • stmt_case case_block
   52           | stmt_case • case_block

    KW_CASE  shift, and go to state 93

    $default  reduce using rule 51 (case_block)

    stmt_case   go to state 94
    case_block  go to state 102


State 95

   53 stmt_match: KW_MATCH parens '{' case_block • '}'

    '}'  shift, and go to state 103


State 96

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 lhs_expr: • atom_chain
   26 prefix: • OP_AFFIX
   27       | • '+'
   28       | • '-'
   30 prefix_chain: • atom_chain
   31             | • prefix prefix_chain
   32 affix_chain: • prefix_chain
   33            | • affix_chain suffix
   34 rhs_expr: • affix_chain expr_tail
   35         | • const expr_tail
   38 full_decl: • lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr
   39 empty_decl: • lhs_expr OP_TYPE type_expr
   40 assignment: • lhs_expr OP_ASSIGN rhs_expr
   41 typed_val: • OP_TYPE type_expr OP_ASSIGN rhs_expr
   42 bare_name: • lhs_expr OP_TYPE
   43 bare_type: • OP_TYPE type_expr
   44 bare_val: • OP_ASSIGN rhs_expr
   45 bare_expr: • rhs_expr
   46 stmt_if: • KW_IF parens braces
   47        | • KW_IF parens braces else_chain
   53 stmt_match: • KW_MATCH parens '{' case_block '}'
   54 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces
   54         | KW_FOR '(' opt_expr ';' • opt_expr ';' opt_expr ')' braces
   55 expr: • full_decl
   56     | • empty_decl
   57     | • assignment
   58     | • typed_val
   59     | • bare_name
   60     | • bare_type
   61     | • bare_val
   62     | • bare_expr
   63     | • stmt_if
   64     | • stmt_match
   65     | • stmt_for
   66 opt_expr: • expr
   67         | ε •  [';']

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 23
    '-'         shift, and go to state 24

    $default  reduce using rule 67 (opt_expr)

    const         go to state 25
    ident         go to state 26
    parens        go to state 27
    braces        go to state 28
    bracks        go to state 29
    expr_atom     go to state 30
    atom_link     go to state 31
    atom_chain    go to state 32
    lhs_expr      go to state 33
    prefix        go to state 34
    prefix_chain  go to state 35
    affix_chain   go to state 36
    rhs_expr      go to state 37
    full_decl     go to state 38
    empty_decl    go to state 39
    assignment    go to state 40
    typed_val     go to state 41
    bare_name     go to state 42
    bare_type     go to state 43
    bare_val      go to state 44
    bare_expr     go to state 45
    stmt_if       go to state 46
    stmt_match    go to state 47
    stmt_for      go to state 48
    expr          go to state 80
    opt_expr      go to state 104


State 97

   73 expr_tuple: expr ',' expr_tuple •

    $default  reduce using rule 73 (expr_tuple)


State 98

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   26 prefix: • OP_AFFIX
   27       | • '+'
   28       | • '-'
   30 prefix_chain: • atom_chain
   31             | • prefix prefix_chain
   32 affix_chain: • prefix_chain
   33            | • affix_chain suffix
   34 rhs_expr: • affix_chain expr_tail
   35         | • const expr_tail
   38 full_decl: lhs_expr OP_TYPE type_expr OP_ASSIGN • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 23
    '-'         shift, and go to state 24

    const         go to state 25
    ident         go to state 26
    parens        go to state 27
    braces        go to state 28
    bracks        go to state 29
    expr_atom     go to state 30
    atom_link     go to state 31
    atom_chain    go to state 53
    prefix        go to state 34
    prefix_chain  go to state 35
    affix_chain   go to state 36
    rhs_expr      go to state 105


State 99

   48 else_chain: KW_ELSE braces •

    $default  reduce using rule 48 (else_chain)


State 100

   49 else_chain: KW_ELSE stmt_if •

    $default  reduce using rule 49 (else_chain)


State 101

   11 braces: • '{' expr_block '}'
   50 stmt_case: KW_CASE parens • braces

    '{'  shift, and go to state 20

    braces  go to state 106


State 102

   52 case_block: stmt_case case_block •

    $default  reduce using rule 52 (case_block)


State 103

   53 stmt_match: KW_MATCH parens '{' case_block '}' •

    $default  reduce using rule 53 (stmt_match)


State 104

   54 stmt_for: KW_FOR '(' opt_expr ';' opt_expr • ';' opt_expr ')' braces

    ';'  shift, and go to state 107


State 105

   38 full_decl: lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr •

    $default  reduce using rule 38 (full_decl)


State 106

   50 stmt_case: KW_CASE parens braces •

    $default  reduce using rule 50 (stmt_case)


State 107

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 lhs_expr: • atom_chain
   26 prefix: • OP_AFFIX
   27       | • '+'
   28       | • '-'
   30 prefix_chain: • atom_chain
   31             | • prefix prefix_chain
   32 affix_chain: • prefix_chain
   33            | • affix_chain suffix
   34 rhs_expr: • affix_chain expr_tail
   35         | • const expr_tail
   38 full_decl: • lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr
   39 empty_decl: • lhs_expr OP_TYPE type_expr
   40 assignment: • lhs_expr OP_ASSIGN rhs_expr
   41 typed_val: • OP_TYPE type_expr OP_ASSIGN rhs_expr
   42 bare_name: • lhs_expr OP_TYPE
   43 bare_type: • OP_TYPE type_expr
   44 bare_val: • OP_ASSIGN rhs_expr
   45 bare_expr: • rhs_expr
   46 stmt_if: • KW_IF parens braces
   47        | • KW_IF parens braces else_chain
   53 stmt_match: • KW_MATCH parens '{' case_block '}'
   54 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces
   54         | KW_FOR '(' opt_expr ';' opt_expr ';' • opt_expr ')' braces
   55 expr: • full_decl
   56     | • empty_decl
   57     | • assignment
   58     | • typed_val
   59     | • bare_name
   60     | • bare_type
   61     | • bare_val
   62     | • bare_expr
   63     | • stmt_if
   64     | • stmt_match
   65     | • stmt_for
   66 opt_expr: • expr
   67         | ε •  [')']

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22
    '+'         shift, and go to state 23
    '-'         shift, and go to state 24

    $default  reduce using rule 67 (opt_expr)

    const         go to state 25
    ident         go to state 26
    parens        go to state 27
    braces        go to state 28
    bracks        go to state 29
    expr_atom     go to state 30
    atom_link     go to state 31
    atom_chain    go to state 32
    lhs_expr      go to state 33
    prefix        go to state 34
    prefix_chain  go to state 35
    affix_chain   go to state 36
    rhs_expr      go to state 37
    full_decl     go to state 38
    empty_decl    go to state 39
    assignment    go to state 40
    typed_val     go to state 41
    bare_name     go to state 42
    bare_type     go to state 43
    bare_val      go to state 44
    bare_expr     go to state 45
    stmt_if       go to state 46
    stmt_match    go to state 47
    stmt_for      go to state 48
    expr          go to state 80
    opt_expr      go to state 108


State 108

   54 stmt_for: KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr • ')' braces

    ')'  shift, and go to state 109


State 109

   11 braces: • '{' expr_block '}'
   54 stmt_for: KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' • braces

    '{'  shift, and go to state 20

    braces  go to state 110


State 110

   54 stmt_for: KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces •

    $default  reduce using rule 54 (stmt_for)
