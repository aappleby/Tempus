Terminals unused in grammar

    KW_THEN


Grammar

    0 $accept: program $end

    1 marker: TOK_MARKER

    2 const: TOK_INT
    3      | TOK_FLOAT
    4      | TOK_STRING

    5 ident: TOK_IDENT

    6 op_type: OP_TYPE
    7        | ':'

    8 op_bin: OP_BIN
    9       | '+'
   10       | '-'

   11 op_assign: OP_ASSIGN

   12 prefix: OP_AFFIX
   13       | '+'
   14       | '-'

   15 suffix: OP_AFFIX

   16 program: block

   17 parens: '(' list ')'

   18 braces: '{' block '}'

   19 bracks: '[' list ']'

   20 atom: ident
   21     | parens
   22     | braces
   23     | bracks

   24 ident_term: atom
   25           | '.'

   26 ident_path: ident_term ident_path
   27           | ident_term

   28 expr: expr_prefix expr_term expr_suffix expr_chain

   29 expr_prefix: prefix expr_prefix
   30            | ε

   31 expr_term: ident_path
   32          | const

   33 expr_suffix: suffix expr_suffix
   34            | ε

   35 expr_chain: op_bin expr
   36           | ε

   37 stmt: expr stmt_dir
   38     | expr op_assign expr
   39     | stmt_dir
   40     | op_assign expr
   41     | expr

   42 stmt_dir: op_type stmt_type
   43         | op_type

   44 stmt_type: expr op_assign stmt
   45          | expr op_assign flow
   46          | expr

   47 opt_stmt: stmt
   48         | ε

   49 list: stmt tail
   50     | ε

   51 tail: ',' stmt tail
   52     | ε

   53 block: marker block
   54      | flow block
   55      | stmt ';' block
   56      | ';' block
   57      | stmt
   58      | ε

   59 for: KW_FOR '(' opt_stmt ';' opt_stmt ';' opt_stmt ')' braces

   60 if: KW_IF parens braces elif else

   61 elif: KW_ELIF parens braces elif
   62     | ε

   63 else: KW_ELSE braces
   64     | ε

   65 match: KW_MATCH parens braces

   66 case: KW_CASE parens braces

   67 flow: for
   68     | if
   69     | match
   70     | case


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 17 59
    ')' (41) 17 59
    '+' (43) 9 13
    ',' (44) 51
    '-' (45) 10 14
    '.' (46) 25
    ':' (58) 7
    ';' (59) 55 56 59
    '[' (91) 19
    ']' (93) 19
    '{' (123) 18
    '}' (125) 18
    error (256)
    TOK_MARKER <val_str> (258) 1
    TOK_IDENT <val_str> (259) 5
    TOK_INT <val_int> (260) 2
    TOK_FLOAT <val_float> (261) 3
    TOK_STRING <val_str> (262) 4
    OP_TYPE <val_str> (263) 6
    OP_ASSIGN <val_str> (264) 11
    OP_BIN <val_str> (265) 8
    OP_AFFIX <val_str> (266) 12 15
    KW_IF (267) 60
    KW_THEN (268)
    KW_ELIF (269) 61
    KW_ELSE (270) 63
    KW_MATCH (271) 65
    KW_CASE (272) 66
    KW_FOR (273) 59


Nonterminals, with rules where they appear

    $accept (31)
        on left: 0
    marker (32)
        on left: 1
        on right: 53
    const (33)
        on left: 2 3 4
        on right: 32
    ident (34)
        on left: 5
        on right: 20
    op_type (35)
        on left: 6 7
        on right: 42 43
    op_bin (36)
        on left: 8 9 10
        on right: 35
    op_assign (37)
        on left: 11
        on right: 38 40 44 45
    prefix (38)
        on left: 12 13 14
        on right: 29
    suffix (39)
        on left: 15
        on right: 33
    program (40)
        on left: 16
        on right: 0
    parens (41)
        on left: 17
        on right: 21 60 61 65 66
    braces (42)
        on left: 18
        on right: 22 59 60 61 63 65 66
    bracks (43)
        on left: 19
        on right: 23
    atom (44)
        on left: 20 21 22 23
        on right: 24
    ident_term (45)
        on left: 24 25
        on right: 26 27
    ident_path (46)
        on left: 26 27
        on right: 26 31
    expr (47)
        on left: 28
        on right: 35 37 38 40 41 44 45 46
    expr_prefix (48)
        on left: 29 30
        on right: 28 29
    expr_term (49)
        on left: 31 32
        on right: 28
    expr_suffix (50)
        on left: 33 34
        on right: 28 33
    expr_chain (51)
        on left: 35 36
        on right: 28
    stmt (52)
        on left: 37 38 39 40 41
        on right: 44 47 49 51 55 57
    stmt_dir (53)
        on left: 42 43
        on right: 37 39
    stmt_type (54)
        on left: 44 45 46
        on right: 42
    opt_stmt (55)
        on left: 47 48
        on right: 59
    list (56)
        on left: 49 50
        on right: 17 19
    tail (57)
        on left: 51 52
        on right: 49 51
    block (58)
        on left: 53 54 55 56 57 58
        on right: 16 18 53 54 55 56
    for (59)
        on left: 59
        on right: 67
    if (60)
        on left: 60
        on right: 68
    elif (61)
        on left: 61 62
        on right: 60 61
    else (62)
        on left: 63 64
        on right: 60
    match (63)
        on left: 65
        on right: 69
    case (64)
        on left: 66
        on right: 70
    flow (65)
        on left: 67 68 69 70
        on right: 45 54


State 0

    0 $accept: • program $end
    1 marker: • TOK_MARKER
    6 op_type: • OP_TYPE
    7        | • ':'
   11 op_assign: • OP_ASSIGN
   12 prefix: • OP_AFFIX
   13       | • '+'
   14       | • '-'
   16 program: • block
   28 expr: • expr_prefix expr_term expr_suffix expr_chain
   29 expr_prefix: • prefix expr_prefix
   30            | ε •  [TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, '(', '{', '[', '.']
   37 stmt: • expr stmt_dir
   38     | • expr op_assign expr
   39     | • stmt_dir
   40     | • op_assign expr
   41     | • expr
   42 stmt_dir: • op_type stmt_type
   43         | • op_type
   53 block: • marker block
   54      | • flow block
   55      | • stmt ';' block
   56      | • ';' block
   57      | • stmt
   58      | ε •  [$end]
   59 for: • KW_FOR '(' opt_stmt ';' opt_stmt ';' opt_stmt ')' braces
   60 if: • KW_IF parens braces elif else
   65 match: • KW_MATCH parens braces
   66 case: • KW_CASE parens braces
   67 flow: • for
   68     | • if
   69     | • match
   70     | • case

    TOK_MARKER  shift, and go to state 1
    OP_TYPE     shift, and go to state 2
    OP_ASSIGN   shift, and go to state 3
    OP_AFFIX    shift, and go to state 4
    KW_IF       shift, and go to state 5
    KW_MATCH    shift, and go to state 6
    KW_CASE     shift, and go to state 7
    KW_FOR      shift, and go to state 8
    ':'         shift, and go to state 9
    '+'         shift, and go to state 10
    '-'         shift, and go to state 11
    ';'         shift, and go to state 12

    $end      reduce using rule 58 (block)
    $default  reduce using rule 30 (expr_prefix)

    marker       go to state 13
    op_type      go to state 14
    op_assign    go to state 15
    prefix       go to state 16
    program      go to state 17
    expr         go to state 18
    expr_prefix  go to state 19
    stmt         go to state 20
    stmt_dir     go to state 21
    block        go to state 22
    for          go to state 23
    if           go to state 24
    match        go to state 25
    case         go to state 26
    flow         go to state 27


State 1

    1 marker: TOK_MARKER •

    $default  reduce using rule 1 (marker)


State 2

    6 op_type: OP_TYPE •

    $default  reduce using rule 6 (op_type)


State 3

   11 op_assign: OP_ASSIGN •

    $default  reduce using rule 11 (op_assign)


State 4

   12 prefix: OP_AFFIX •

    $default  reduce using rule 12 (prefix)


State 5

   17 parens: • '(' list ')'
   60 if: KW_IF • parens braces elif else

    '('  shift, and go to state 28

    parens  go to state 29


State 6

   17 parens: • '(' list ')'
   65 match: KW_MATCH • parens braces

    '('  shift, and go to state 28

    parens  go to state 30


State 7

   17 parens: • '(' list ')'
   66 case: KW_CASE • parens braces

    '('  shift, and go to state 28

    parens  go to state 31


State 8

   59 for: KW_FOR • '(' opt_stmt ';' opt_stmt ';' opt_stmt ')' braces

    '('  shift, and go to state 32


State 9

    7 op_type: ':' •

    $default  reduce using rule 7 (op_type)


State 10

   13 prefix: '+' •

    $default  reduce using rule 13 (prefix)


State 11

   14 prefix: '-' •

    $default  reduce using rule 14 (prefix)


State 12

    1 marker: • TOK_MARKER
    6 op_type: • OP_TYPE
    7        | • ':'
   11 op_assign: • OP_ASSIGN
   12 prefix: • OP_AFFIX
   13       | • '+'
   14       | • '-'
   28 expr: • expr_prefix expr_term expr_suffix expr_chain
   29 expr_prefix: • prefix expr_prefix
   30            | ε •  [TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, '(', '{', '[', '.']
   37 stmt: • expr stmt_dir
   38     | • expr op_assign expr
   39     | • stmt_dir
   40     | • op_assign expr
   41     | • expr
   42 stmt_dir: • op_type stmt_type
   43         | • op_type
   53 block: • marker block
   54      | • flow block
   55      | • stmt ';' block
   56      | • ';' block
   56      | ';' • block
   57      | • stmt
   58      | ε •  [$end, '}']
   59 for: • KW_FOR '(' opt_stmt ';' opt_stmt ';' opt_stmt ')' braces
   60 if: • KW_IF parens braces elif else
   65 match: • KW_MATCH parens braces
   66 case: • KW_CASE parens braces
   67 flow: • for
   68     | • if
   69     | • match
   70     | • case

    TOK_MARKER  shift, and go to state 1
    OP_TYPE     shift, and go to state 2
    OP_ASSIGN   shift, and go to state 3
    OP_AFFIX    shift, and go to state 4
    KW_IF       shift, and go to state 5
    KW_MATCH    shift, and go to state 6
    KW_CASE     shift, and go to state 7
    KW_FOR      shift, and go to state 8
    ':'         shift, and go to state 9
    '+'         shift, and go to state 10
    '-'         shift, and go to state 11
    ';'         shift, and go to state 12

    $end      reduce using rule 58 (block)
    '}'       reduce using rule 58 (block)
    $default  reduce using rule 30 (expr_prefix)

    marker       go to state 13
    op_type      go to state 14
    op_assign    go to state 15
    prefix       go to state 16
    expr         go to state 18
    expr_prefix  go to state 19
    stmt         go to state 20
    stmt_dir     go to state 21
    block        go to state 33
    for          go to state 23
    if           go to state 24
    match        go to state 25
    case         go to state 26
    flow         go to state 27


State 13

    1 marker: • TOK_MARKER
    6 op_type: • OP_TYPE
    7        | • ':'
   11 op_assign: • OP_ASSIGN
   12 prefix: • OP_AFFIX
   13       | • '+'
   14       | • '-'
   28 expr: • expr_prefix expr_term expr_suffix expr_chain
   29 expr_prefix: • prefix expr_prefix
   30            | ε •  [TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, '(', '{', '[', '.']
   37 stmt: • expr stmt_dir
   38     | • expr op_assign expr
   39     | • stmt_dir
   40     | • op_assign expr
   41     | • expr
   42 stmt_dir: • op_type stmt_type
   43         | • op_type
   53 block: • marker block
   53      | marker • block
   54      | • flow block
   55      | • stmt ';' block
   56      | • ';' block
   57      | • stmt
   58      | ε •  [$end, '}']
   59 for: • KW_FOR '(' opt_stmt ';' opt_stmt ';' opt_stmt ')' braces
   60 if: • KW_IF parens braces elif else
   65 match: • KW_MATCH parens braces
   66 case: • KW_CASE parens braces
   67 flow: • for
   68     | • if
   69     | • match
   70     | • case

    TOK_MARKER  shift, and go to state 1
    OP_TYPE     shift, and go to state 2
    OP_ASSIGN   shift, and go to state 3
    OP_AFFIX    shift, and go to state 4
    KW_IF       shift, and go to state 5
    KW_MATCH    shift, and go to state 6
    KW_CASE     shift, and go to state 7
    KW_FOR      shift, and go to state 8
    ':'         shift, and go to state 9
    '+'         shift, and go to state 10
    '-'         shift, and go to state 11
    ';'         shift, and go to state 12

    $end      reduce using rule 58 (block)
    '}'       reduce using rule 58 (block)
    $default  reduce using rule 30 (expr_prefix)

    marker       go to state 13
    op_type      go to state 14
    op_assign    go to state 15
    prefix       go to state 16
    expr         go to state 18
    expr_prefix  go to state 19
    stmt         go to state 20
    stmt_dir     go to state 21
    block        go to state 34
    for          go to state 23
    if           go to state 24
    match        go to state 25
    case         go to state 26
    flow         go to state 27


State 14

   12 prefix: • OP_AFFIX
   13       | • '+'
   14       | • '-'
   28 expr: • expr_prefix expr_term expr_suffix expr_chain
   29 expr_prefix: • prefix expr_prefix
   30            | ε •  [TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, '(', '{', '[', '.']
   42 stmt_dir: op_type • stmt_type
   43         | op_type •  [$end, ')', '}', ']', ',', ';']
   44 stmt_type: • expr op_assign stmt
   45          | • expr op_assign flow
   46          | • expr

    OP_AFFIX  shift, and go to state 4
    '+'       shift, and go to state 10
    '-'       shift, and go to state 11

    $end      reduce using rule 43 (stmt_dir)
    ')'       reduce using rule 43 (stmt_dir)
    '}'       reduce using rule 43 (stmt_dir)
    ']'       reduce using rule 43 (stmt_dir)
    ','       reduce using rule 43 (stmt_dir)
    ';'       reduce using rule 43 (stmt_dir)
    $default  reduce using rule 30 (expr_prefix)

    prefix       go to state 16
    expr         go to state 35
    expr_prefix  go to state 19
    stmt_type    go to state 36


State 15

   12 prefix: • OP_AFFIX
   13       | • '+'
   14       | • '-'
   28 expr: • expr_prefix expr_term expr_suffix expr_chain
   29 expr_prefix: • prefix expr_prefix
   30            | ε •  [TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, '(', '{', '[', '.']
   40 stmt: op_assign • expr

    OP_AFFIX  shift, and go to state 4
    '+'       shift, and go to state 10
    '-'       shift, and go to state 11

    $default  reduce using rule 30 (expr_prefix)

    prefix       go to state 16
    expr         go to state 37
    expr_prefix  go to state 19


State 16

   12 prefix: • OP_AFFIX
   13       | • '+'
   14       | • '-'
   29 expr_prefix: • prefix expr_prefix
   29            | prefix • expr_prefix
   30            | ε •  [TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, '(', '{', '[', '.']

    OP_AFFIX  shift, and go to state 4
    '+'       shift, and go to state 10
    '-'       shift, and go to state 11

    $default  reduce using rule 30 (expr_prefix)

    prefix       go to state 16
    expr_prefix  go to state 38


State 17

    0 $accept: program • $end

    $end  shift, and go to state 39


State 18

    6 op_type: • OP_TYPE
    7        | • ':'
   11 op_assign: • OP_ASSIGN
   37 stmt: expr • stmt_dir
   38     | expr • op_assign expr
   41     | expr •  [$end, ')', '}', ']', ',', ';']
   42 stmt_dir: • op_type stmt_type
   43         | • op_type

    OP_TYPE    shift, and go to state 2
    OP_ASSIGN  shift, and go to state 3
    ':'        shift, and go to state 9

    $default  reduce using rule 41 (stmt)

    op_type    go to state 14
    op_assign  go to state 40
    stmt_dir   go to state 41


State 19

    2 const: • TOK_INT
    3      | • TOK_FLOAT
    4      | • TOK_STRING
    5 ident: • TOK_IDENT
   17 parens: • '(' list ')'
   18 braces: • '{' block '}'
   19 bracks: • '[' list ']'
   20 atom: • ident
   21     | • parens
   22     | • braces
   23     | • bracks
   24 ident_term: • atom
   25           | • '.'
   26 ident_path: • ident_term ident_path
   27           | • ident_term
   28 expr: expr_prefix • expr_term expr_suffix expr_chain
   31 expr_term: • ident_path
   32          | • const

    TOK_IDENT   shift, and go to state 42
    TOK_INT     shift, and go to state 43
    TOK_FLOAT   shift, and go to state 44
    TOK_STRING  shift, and go to state 45
    '('         shift, and go to state 28
    '{'         shift, and go to state 46
    '['         shift, and go to state 47
    '.'         shift, and go to state 48

    const       go to state 49
    ident       go to state 50
    parens      go to state 51
    braces      go to state 52
    bracks      go to state 53
    atom        go to state 54
    ident_term  go to state 55
    ident_path  go to state 56
    expr_term   go to state 57


State 20

   55 block: stmt • ';' block
   57      | stmt •  [$end, '}']

    ';'  shift, and go to state 58

    $default  reduce using rule 57 (block)


State 21

   39 stmt: stmt_dir •

    $default  reduce using rule 39 (stmt)


State 22

   16 program: block •

    $default  reduce using rule 16 (program)


State 23

   67 flow: for •

    $default  reduce using rule 67 (flow)


State 24

   68 flow: if •

    $default  reduce using rule 68 (flow)


State 25

   69 flow: match •

    $default  reduce using rule 69 (flow)


State 26

   70 flow: case •

    $default  reduce using rule 70 (flow)


State 27

    1 marker: • TOK_MARKER
    6 op_type: • OP_TYPE
    7        | • ':'
   11 op_assign: • OP_ASSIGN
   12 prefix: • OP_AFFIX
   13       | • '+'
   14       | • '-'
   28 expr: • expr_prefix expr_term expr_suffix expr_chain
   29 expr_prefix: • prefix expr_prefix
   30            | ε •  [TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, '(', '{', '[', '.']
   37 stmt: • expr stmt_dir
   38     | • expr op_assign expr
   39     | • stmt_dir
   40     | • op_assign expr
   41     | • expr
   42 stmt_dir: • op_type stmt_type
   43         | • op_type
   53 block: • marker block
   54      | • flow block
   54      | flow • block
   55      | • stmt ';' block
   56      | • ';' block
   57      | • stmt
   58      | ε •  [$end, '}']
   59 for: • KW_FOR '(' opt_stmt ';' opt_stmt ';' opt_stmt ')' braces
   60 if: • KW_IF parens braces elif else
   65 match: • KW_MATCH parens braces
   66 case: • KW_CASE parens braces
   67 flow: • for
   68     | • if
   69     | • match
   70     | • case

    TOK_MARKER  shift, and go to state 1
    OP_TYPE     shift, and go to state 2
    OP_ASSIGN   shift, and go to state 3
    OP_AFFIX    shift, and go to state 4
    KW_IF       shift, and go to state 5
    KW_MATCH    shift, and go to state 6
    KW_CASE     shift, and go to state 7
    KW_FOR      shift, and go to state 8
    ':'         shift, and go to state 9
    '+'         shift, and go to state 10
    '-'         shift, and go to state 11
    ';'         shift, and go to state 12

    $end      reduce using rule 58 (block)
    '}'       reduce using rule 58 (block)
    $default  reduce using rule 30 (expr_prefix)

    marker       go to state 13
    op_type      go to state 14
    op_assign    go to state 15
    prefix       go to state 16
    expr         go to state 18
    expr_prefix  go to state 19
    stmt         go to state 20
    stmt_dir     go to state 21
    block        go to state 59
    for          go to state 23
    if           go to state 24
    match        go to state 25
    case         go to state 26
    flow         go to state 27


State 28

    6 op_type: • OP_TYPE
    7        | • ':'
   11 op_assign: • OP_ASSIGN
   12 prefix: • OP_AFFIX
   13       | • '+'
   14       | • '-'
   17 parens: '(' • list ')'
   28 expr: • expr_prefix expr_term expr_suffix expr_chain
   29 expr_prefix: • prefix expr_prefix
   30            | ε •  [TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, '(', '{', '[', '.']
   37 stmt: • expr stmt_dir
   38     | • expr op_assign expr
   39     | • stmt_dir
   40     | • op_assign expr
   41     | • expr
   42 stmt_dir: • op_type stmt_type
   43         | • op_type
   49 list: • stmt tail
   50     | ε •  [')']

    OP_TYPE    shift, and go to state 2
    OP_ASSIGN  shift, and go to state 3
    OP_AFFIX   shift, and go to state 4
    ':'        shift, and go to state 9
    '+'        shift, and go to state 10
    '-'        shift, and go to state 11

    ')'       reduce using rule 50 (list)
    $default  reduce using rule 30 (expr_prefix)

    op_type      go to state 14
    op_assign    go to state 15
    prefix       go to state 16
    expr         go to state 18
    expr_prefix  go to state 19
    stmt         go to state 60
    stmt_dir     go to state 21
    list         go to state 61


State 29

   18 braces: • '{' block '}'
   60 if: KW_IF parens • braces elif else

    '{'  shift, and go to state 46

    braces  go to state 62


State 30

   18 braces: • '{' block '}'
   65 match: KW_MATCH parens • braces

    '{'  shift, and go to state 46

    braces  go to state 63


State 31

   18 braces: • '{' block '}'
   66 case: KW_CASE parens • braces

    '{'  shift, and go to state 46

    braces  go to state 64


State 32

    6 op_type: • OP_TYPE
    7        | • ':'
   11 op_assign: • OP_ASSIGN
   12 prefix: • OP_AFFIX
   13       | • '+'
   14       | • '-'
   28 expr: • expr_prefix expr_term expr_suffix expr_chain
   29 expr_prefix: • prefix expr_prefix
   30            | ε •  [TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, '(', '{', '[', '.']
   37 stmt: • expr stmt_dir
   38     | • expr op_assign expr
   39     | • stmt_dir
   40     | • op_assign expr
   41     | • expr
   42 stmt_dir: • op_type stmt_type
   43         | • op_type
   47 opt_stmt: • stmt
   48         | ε •  [';']
   59 for: KW_FOR '(' • opt_stmt ';' opt_stmt ';' opt_stmt ')' braces

    OP_TYPE    shift, and go to state 2
    OP_ASSIGN  shift, and go to state 3
    OP_AFFIX   shift, and go to state 4
    ':'        shift, and go to state 9
    '+'        shift, and go to state 10
    '-'        shift, and go to state 11

    ';'       reduce using rule 48 (opt_stmt)
    $default  reduce using rule 30 (expr_prefix)

    op_type      go to state 14
    op_assign    go to state 15
    prefix       go to state 16
    expr         go to state 18
    expr_prefix  go to state 19
    stmt         go to state 65
    stmt_dir     go to state 21
    opt_stmt     go to state 66


State 33

   56 block: ';' block •

    $default  reduce using rule 56 (block)


State 34

   53 block: marker block •

    $default  reduce using rule 53 (block)


State 35

   11 op_assign: • OP_ASSIGN
   44 stmt_type: expr • op_assign stmt
   45          | expr • op_assign flow
   46          | expr •  [$end, ')', '}', ']', ',', ';']

    OP_ASSIGN  shift, and go to state 3

    $default  reduce using rule 46 (stmt_type)

    op_assign  go to state 67


State 36

   42 stmt_dir: op_type stmt_type •

    $default  reduce using rule 42 (stmt_dir)


State 37

   40 stmt: op_assign expr •

    $default  reduce using rule 40 (stmt)


State 38

   29 expr_prefix: prefix expr_prefix •

    $default  reduce using rule 29 (expr_prefix)


State 39

    0 $accept: program $end •

    $default  accept


State 40

   12 prefix: • OP_AFFIX
   13       | • '+'
   14       | • '-'
   28 expr: • expr_prefix expr_term expr_suffix expr_chain
   29 expr_prefix: • prefix expr_prefix
   30            | ε •  [TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, '(', '{', '[', '.']
   38 stmt: expr op_assign • expr

    OP_AFFIX  shift, and go to state 4
    '+'       shift, and go to state 10
    '-'       shift, and go to state 11

    $default  reduce using rule 30 (expr_prefix)

    prefix       go to state 16
    expr         go to state 68
    expr_prefix  go to state 19


State 41

   37 stmt: expr stmt_dir •

    $default  reduce using rule 37 (stmt)


State 42

    5 ident: TOK_IDENT •

    $default  reduce using rule 5 (ident)


State 43

    2 const: TOK_INT •

    $default  reduce using rule 2 (const)


State 44

    3 const: TOK_FLOAT •

    $default  reduce using rule 3 (const)


State 45

    4 const: TOK_STRING •

    $default  reduce using rule 4 (const)


State 46

    1 marker: • TOK_MARKER
    6 op_type: • OP_TYPE
    7        | • ':'
   11 op_assign: • OP_ASSIGN
   12 prefix: • OP_AFFIX
   13       | • '+'
   14       | • '-'
   18 braces: '{' • block '}'
   28 expr: • expr_prefix expr_term expr_suffix expr_chain
   29 expr_prefix: • prefix expr_prefix
   30            | ε •  [TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, '(', '{', '[', '.']
   37 stmt: • expr stmt_dir
   38     | • expr op_assign expr
   39     | • stmt_dir
   40     | • op_assign expr
   41     | • expr
   42 stmt_dir: • op_type stmt_type
   43         | • op_type
   53 block: • marker block
   54      | • flow block
   55      | • stmt ';' block
   56      | • ';' block
   57      | • stmt
   58      | ε •  ['}']
   59 for: • KW_FOR '(' opt_stmt ';' opt_stmt ';' opt_stmt ')' braces
   60 if: • KW_IF parens braces elif else
   65 match: • KW_MATCH parens braces
   66 case: • KW_CASE parens braces
   67 flow: • for
   68     | • if
   69     | • match
   70     | • case

    TOK_MARKER  shift, and go to state 1
    OP_TYPE     shift, and go to state 2
    OP_ASSIGN   shift, and go to state 3
    OP_AFFIX    shift, and go to state 4
    KW_IF       shift, and go to state 5
    KW_MATCH    shift, and go to state 6
    KW_CASE     shift, and go to state 7
    KW_FOR      shift, and go to state 8
    ':'         shift, and go to state 9
    '+'         shift, and go to state 10
    '-'         shift, and go to state 11
    ';'         shift, and go to state 12

    '}'       reduce using rule 58 (block)
    $default  reduce using rule 30 (expr_prefix)

    marker       go to state 13
    op_type      go to state 14
    op_assign    go to state 15
    prefix       go to state 16
    expr         go to state 18
    expr_prefix  go to state 19
    stmt         go to state 20
    stmt_dir     go to state 21
    block        go to state 69
    for          go to state 23
    if           go to state 24
    match        go to state 25
    case         go to state 26
    flow         go to state 27


State 47

    6 op_type: • OP_TYPE
    7        | • ':'
   11 op_assign: • OP_ASSIGN
   12 prefix: • OP_AFFIX
   13       | • '+'
   14       | • '-'
   19 bracks: '[' • list ']'
   28 expr: • expr_prefix expr_term expr_suffix expr_chain
   29 expr_prefix: • prefix expr_prefix
   30            | ε •  [TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, '(', '{', '[', '.']
   37 stmt: • expr stmt_dir
   38     | • expr op_assign expr
   39     | • stmt_dir
   40     | • op_assign expr
   41     | • expr
   42 stmt_dir: • op_type stmt_type
   43         | • op_type
   49 list: • stmt tail
   50     | ε •  [']']

    OP_TYPE    shift, and go to state 2
    OP_ASSIGN  shift, and go to state 3
    OP_AFFIX   shift, and go to state 4
    ':'        shift, and go to state 9
    '+'        shift, and go to state 10
    '-'        shift, and go to state 11

    ']'       reduce using rule 50 (list)
    $default  reduce using rule 30 (expr_prefix)

    op_type      go to state 14
    op_assign    go to state 15
    prefix       go to state 16
    expr         go to state 18
    expr_prefix  go to state 19
    stmt         go to state 60
    stmt_dir     go to state 21
    list         go to state 70


State 48

   25 ident_term: '.' •

    $default  reduce using rule 25 (ident_term)


State 49

   32 expr_term: const •

    $default  reduce using rule 32 (expr_term)


State 50

   20 atom: ident •

    $default  reduce using rule 20 (atom)


State 51

   21 atom: parens •

    $default  reduce using rule 21 (atom)


State 52

   22 atom: braces •

    $default  reduce using rule 22 (atom)


State 53

   23 atom: bracks •

    $default  reduce using rule 23 (atom)


State 54

   24 ident_term: atom •

    $default  reduce using rule 24 (ident_term)


State 55

    5 ident: • TOK_IDENT
   17 parens: • '(' list ')'
   18 braces: • '{' block '}'
   19 bracks: • '[' list ']'
   20 atom: • ident
   21     | • parens
   22     | • braces
   23     | • bracks
   24 ident_term: • atom
   25           | • '.'
   26 ident_path: • ident_term ident_path
   26           | ident_term • ident_path
   27           | • ident_term
   27           | ident_term •  [$end, OP_TYPE, OP_ASSIGN, OP_BIN, OP_AFFIX, ':', '+', '-', ')', '}', ']', ',', ';']

    TOK_IDENT  shift, and go to state 42
    '('        shift, and go to state 28
    '{'        shift, and go to state 46
    '['        shift, and go to state 47
    '.'        shift, and go to state 48

    $default  reduce using rule 27 (ident_path)

    ident       go to state 50
    parens      go to state 51
    braces      go to state 52
    bracks      go to state 53
    atom        go to state 54
    ident_term  go to state 55
    ident_path  go to state 71


State 56

   31 expr_term: ident_path •

    $default  reduce using rule 31 (expr_term)


State 57

   15 suffix: • OP_AFFIX
   28 expr: expr_prefix expr_term • expr_suffix expr_chain
   33 expr_suffix: • suffix expr_suffix
   34            | ε •  [$end, OP_TYPE, OP_ASSIGN, OP_BIN, ':', '+', '-', ')', '}', ']', ',', ';']

    OP_AFFIX  shift, and go to state 72

    $default  reduce using rule 34 (expr_suffix)

    suffix       go to state 73
    expr_suffix  go to state 74


State 58

    1 marker: • TOK_MARKER
    6 op_type: • OP_TYPE
    7        | • ':'
   11 op_assign: • OP_ASSIGN
   12 prefix: • OP_AFFIX
   13       | • '+'
   14       | • '-'
   28 expr: • expr_prefix expr_term expr_suffix expr_chain
   29 expr_prefix: • prefix expr_prefix
   30            | ε •  [TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, '(', '{', '[', '.']
   37 stmt: • expr stmt_dir
   38     | • expr op_assign expr
   39     | • stmt_dir
   40     | • op_assign expr
   41     | • expr
   42 stmt_dir: • op_type stmt_type
   43         | • op_type
   53 block: • marker block
   54      | • flow block
   55      | • stmt ';' block
   55      | stmt ';' • block
   56      | • ';' block
   57      | • stmt
   58      | ε •  [$end, '}']
   59 for: • KW_FOR '(' opt_stmt ';' opt_stmt ';' opt_stmt ')' braces
   60 if: • KW_IF parens braces elif else
   65 match: • KW_MATCH parens braces
   66 case: • KW_CASE parens braces
   67 flow: • for
   68     | • if
   69     | • match
   70     | • case

    TOK_MARKER  shift, and go to state 1
    OP_TYPE     shift, and go to state 2
    OP_ASSIGN   shift, and go to state 3
    OP_AFFIX    shift, and go to state 4
    KW_IF       shift, and go to state 5
    KW_MATCH    shift, and go to state 6
    KW_CASE     shift, and go to state 7
    KW_FOR      shift, and go to state 8
    ':'         shift, and go to state 9
    '+'         shift, and go to state 10
    '-'         shift, and go to state 11
    ';'         shift, and go to state 12

    $end      reduce using rule 58 (block)
    '}'       reduce using rule 58 (block)
    $default  reduce using rule 30 (expr_prefix)

    marker       go to state 13
    op_type      go to state 14
    op_assign    go to state 15
    prefix       go to state 16
    expr         go to state 18
    expr_prefix  go to state 19
    stmt         go to state 20
    stmt_dir     go to state 21
    block        go to state 75
    for          go to state 23
    if           go to state 24
    match        go to state 25
    case         go to state 26
    flow         go to state 27


State 59

   54 block: flow block •

    $default  reduce using rule 54 (block)


State 60

   49 list: stmt • tail
   51 tail: • ',' stmt tail
   52     | ε •  [')', ']']

    ','  shift, and go to state 76

    $default  reduce using rule 52 (tail)

    tail  go to state 77


State 61

   17 parens: '(' list • ')'

    ')'  shift, and go to state 78


State 62

   60 if: KW_IF parens braces • elif else
   61 elif: • KW_ELIF parens braces elif
   62     | ε •  [$end, TOK_MARKER, TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, OP_TYPE, OP_ASSIGN, OP_AFFIX, KW_IF, KW_ELSE, KW_MATCH, KW_CASE, KW_FOR, ':', '+', '-', '(', ')', '{', '}', '[', ']', '.', ',', ';']

    KW_ELIF  shift, and go to state 79

    $default  reduce using rule 62 (elif)

    elif  go to state 80


State 63

   65 match: KW_MATCH parens braces •

    $default  reduce using rule 65 (match)


State 64

   66 case: KW_CASE parens braces •

    $default  reduce using rule 66 (case)


State 65

   47 opt_stmt: stmt •

    $default  reduce using rule 47 (opt_stmt)


State 66

   59 for: KW_FOR '(' opt_stmt • ';' opt_stmt ';' opt_stmt ')' braces

    ';'  shift, and go to state 81


State 67

    6 op_type: • OP_TYPE
    7        | • ':'
   11 op_assign: • OP_ASSIGN
   12 prefix: • OP_AFFIX
   13       | • '+'
   14       | • '-'
   28 expr: • expr_prefix expr_term expr_suffix expr_chain
   29 expr_prefix: • prefix expr_prefix
   30            | ε •  [TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, '(', '{', '[', '.']
   37 stmt: • expr stmt_dir
   38     | • expr op_assign expr
   39     | • stmt_dir
   40     | • op_assign expr
   41     | • expr
   42 stmt_dir: • op_type stmt_type
   43         | • op_type
   44 stmt_type: expr op_assign • stmt
   45          | expr op_assign • flow
   59 for: • KW_FOR '(' opt_stmt ';' opt_stmt ';' opt_stmt ')' braces
   60 if: • KW_IF parens braces elif else
   65 match: • KW_MATCH parens braces
   66 case: • KW_CASE parens braces
   67 flow: • for
   68     | • if
   69     | • match
   70     | • case

    OP_TYPE    shift, and go to state 2
    OP_ASSIGN  shift, and go to state 3
    OP_AFFIX   shift, and go to state 4
    KW_IF      shift, and go to state 5
    KW_MATCH   shift, and go to state 6
    KW_CASE    shift, and go to state 7
    KW_FOR     shift, and go to state 8
    ':'        shift, and go to state 9
    '+'        shift, and go to state 10
    '-'        shift, and go to state 11

    $default  reduce using rule 30 (expr_prefix)

    op_type      go to state 14
    op_assign    go to state 15
    prefix       go to state 16
    expr         go to state 18
    expr_prefix  go to state 19
    stmt         go to state 82
    stmt_dir     go to state 21
    for          go to state 23
    if           go to state 24
    match        go to state 25
    case         go to state 26
    flow         go to state 83


State 68

   38 stmt: expr op_assign expr •

    $default  reduce using rule 38 (stmt)


State 69

   18 braces: '{' block • '}'

    '}'  shift, and go to state 84


State 70

   19 bracks: '[' list • ']'

    ']'  shift, and go to state 85


State 71

   26 ident_path: ident_term ident_path •

    $default  reduce using rule 26 (ident_path)


State 72

   15 suffix: OP_AFFIX •

    $default  reduce using rule 15 (suffix)


State 73

   15 suffix: • OP_AFFIX
   33 expr_suffix: • suffix expr_suffix
   33            | suffix • expr_suffix
   34            | ε •  [$end, OP_TYPE, OP_ASSIGN, OP_BIN, ':', '+', '-', ')', '}', ']', ',', ';']

    OP_AFFIX  shift, and go to state 72

    $default  reduce using rule 34 (expr_suffix)

    suffix       go to state 73
    expr_suffix  go to state 86


State 74

    8 op_bin: • OP_BIN
    9       | • '+'
   10       | • '-'
   28 expr: expr_prefix expr_term expr_suffix • expr_chain
   35 expr_chain: • op_bin expr
   36           | ε •  [$end, OP_TYPE, OP_ASSIGN, ':', ')', '}', ']', ',', ';']

    OP_BIN  shift, and go to state 87
    '+'     shift, and go to state 88
    '-'     shift, and go to state 89

    $default  reduce using rule 36 (expr_chain)

    op_bin      go to state 90
    expr_chain  go to state 91


State 75

   55 block: stmt ';' block •

    $default  reduce using rule 55 (block)


State 76

    6 op_type: • OP_TYPE
    7        | • ':'
   11 op_assign: • OP_ASSIGN
   12 prefix: • OP_AFFIX
   13       | • '+'
   14       | • '-'
   28 expr: • expr_prefix expr_term expr_suffix expr_chain
   29 expr_prefix: • prefix expr_prefix
   30            | ε •  [TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, '(', '{', '[', '.']
   37 stmt: • expr stmt_dir
   38     | • expr op_assign expr
   39     | • stmt_dir
   40     | • op_assign expr
   41     | • expr
   42 stmt_dir: • op_type stmt_type
   43         | • op_type
   51 tail: ',' • stmt tail

    OP_TYPE    shift, and go to state 2
    OP_ASSIGN  shift, and go to state 3
    OP_AFFIX   shift, and go to state 4
    ':'        shift, and go to state 9
    '+'        shift, and go to state 10
    '-'        shift, and go to state 11

    $default  reduce using rule 30 (expr_prefix)

    op_type      go to state 14
    op_assign    go to state 15
    prefix       go to state 16
    expr         go to state 18
    expr_prefix  go to state 19
    stmt         go to state 92
    stmt_dir     go to state 21


State 77

   49 list: stmt tail •

    $default  reduce using rule 49 (list)


State 78

   17 parens: '(' list ')' •

    $default  reduce using rule 17 (parens)


State 79

   17 parens: • '(' list ')'
   61 elif: KW_ELIF • parens braces elif

    '('  shift, and go to state 28

    parens  go to state 93


State 80

   60 if: KW_IF parens braces elif • else
   63 else: • KW_ELSE braces
   64     | ε •  [$end, TOK_MARKER, TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, OP_TYPE, OP_ASSIGN, OP_AFFIX, KW_IF, KW_MATCH, KW_CASE, KW_FOR, ':', '+', '-', '(', ')', '{', '}', '[', ']', '.', ',', ';']

    KW_ELSE  shift, and go to state 94

    $default  reduce using rule 64 (else)

    else  go to state 95


State 81

    6 op_type: • OP_TYPE
    7        | • ':'
   11 op_assign: • OP_ASSIGN
   12 prefix: • OP_AFFIX
   13       | • '+'
   14       | • '-'
   28 expr: • expr_prefix expr_term expr_suffix expr_chain
   29 expr_prefix: • prefix expr_prefix
   30            | ε •  [TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, '(', '{', '[', '.']
   37 stmt: • expr stmt_dir
   38     | • expr op_assign expr
   39     | • stmt_dir
   40     | • op_assign expr
   41     | • expr
   42 stmt_dir: • op_type stmt_type
   43         | • op_type
   47 opt_stmt: • stmt
   48         | ε •  [';']
   59 for: KW_FOR '(' opt_stmt ';' • opt_stmt ';' opt_stmt ')' braces

    OP_TYPE    shift, and go to state 2
    OP_ASSIGN  shift, and go to state 3
    OP_AFFIX   shift, and go to state 4
    ':'        shift, and go to state 9
    '+'        shift, and go to state 10
    '-'        shift, and go to state 11

    ';'       reduce using rule 48 (opt_stmt)
    $default  reduce using rule 30 (expr_prefix)

    op_type      go to state 14
    op_assign    go to state 15
    prefix       go to state 16
    expr         go to state 18
    expr_prefix  go to state 19
    stmt         go to state 65
    stmt_dir     go to state 21
    opt_stmt     go to state 96


State 82

   44 stmt_type: expr op_assign stmt •

    $default  reduce using rule 44 (stmt_type)


State 83

   45 stmt_type: expr op_assign flow •

    $default  reduce using rule 45 (stmt_type)


State 84

   18 braces: '{' block '}' •

    $default  reduce using rule 18 (braces)


State 85

   19 bracks: '[' list ']' •

    $default  reduce using rule 19 (bracks)


State 86

   33 expr_suffix: suffix expr_suffix •

    $default  reduce using rule 33 (expr_suffix)


State 87

    8 op_bin: OP_BIN •

    $default  reduce using rule 8 (op_bin)


State 88

    9 op_bin: '+' •

    $default  reduce using rule 9 (op_bin)


State 89

   10 op_bin: '-' •

    $default  reduce using rule 10 (op_bin)


State 90

   12 prefix: • OP_AFFIX
   13       | • '+'
   14       | • '-'
   28 expr: • expr_prefix expr_term expr_suffix expr_chain
   29 expr_prefix: • prefix expr_prefix
   30            | ε •  [TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, '(', '{', '[', '.']
   35 expr_chain: op_bin • expr

    OP_AFFIX  shift, and go to state 4
    '+'       shift, and go to state 10
    '-'       shift, and go to state 11

    $default  reduce using rule 30 (expr_prefix)

    prefix       go to state 16
    expr         go to state 97
    expr_prefix  go to state 19


State 91

   28 expr: expr_prefix expr_term expr_suffix expr_chain •

    $default  reduce using rule 28 (expr)


State 92

   51 tail: • ',' stmt tail
   51     | ',' stmt • tail
   52     | ε •  [')', ']']

    ','  shift, and go to state 76

    $default  reduce using rule 52 (tail)

    tail  go to state 98


State 93

   18 braces: • '{' block '}'
   61 elif: KW_ELIF parens • braces elif

    '{'  shift, and go to state 46

    braces  go to state 99


State 94

   18 braces: • '{' block '}'
   63 else: KW_ELSE • braces

    '{'  shift, and go to state 46

    braces  go to state 100


State 95

   60 if: KW_IF parens braces elif else •

    $default  reduce using rule 60 (if)


State 96

   59 for: KW_FOR '(' opt_stmt ';' opt_stmt • ';' opt_stmt ')' braces

    ';'  shift, and go to state 101


State 97

   35 expr_chain: op_bin expr •

    $default  reduce using rule 35 (expr_chain)


State 98

   51 tail: ',' stmt tail •

    $default  reduce using rule 51 (tail)


State 99

   61 elif: • KW_ELIF parens braces elif
   61     | KW_ELIF parens braces • elif
   62     | ε •  [$end, TOK_MARKER, TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, OP_TYPE, OP_ASSIGN, OP_AFFIX, KW_IF, KW_ELSE, KW_MATCH, KW_CASE, KW_FOR, ':', '+', '-', '(', ')', '{', '}', '[', ']', '.', ',', ';']

    KW_ELIF  shift, and go to state 79

    $default  reduce using rule 62 (elif)

    elif  go to state 102


State 100

   63 else: KW_ELSE braces •

    $default  reduce using rule 63 (else)


State 101

    6 op_type: • OP_TYPE
    7        | • ':'
   11 op_assign: • OP_ASSIGN
   12 prefix: • OP_AFFIX
   13       | • '+'
   14       | • '-'
   28 expr: • expr_prefix expr_term expr_suffix expr_chain
   29 expr_prefix: • prefix expr_prefix
   30            | ε •  [TOK_IDENT, TOK_INT, TOK_FLOAT, TOK_STRING, '(', '{', '[', '.']
   37 stmt: • expr stmt_dir
   38     | • expr op_assign expr
   39     | • stmt_dir
   40     | • op_assign expr
   41     | • expr
   42 stmt_dir: • op_type stmt_type
   43         | • op_type
   47 opt_stmt: • stmt
   48         | ε •  [')']
   59 for: KW_FOR '(' opt_stmt ';' opt_stmt ';' • opt_stmt ')' braces

    OP_TYPE    shift, and go to state 2
    OP_ASSIGN  shift, and go to state 3
    OP_AFFIX   shift, and go to state 4
    ':'        shift, and go to state 9
    '+'        shift, and go to state 10
    '-'        shift, and go to state 11

    ')'       reduce using rule 48 (opt_stmt)
    $default  reduce using rule 30 (expr_prefix)

    op_type      go to state 14
    op_assign    go to state 15
    prefix       go to state 16
    expr         go to state 18
    expr_prefix  go to state 19
    stmt         go to state 65
    stmt_dir     go to state 21
    opt_stmt     go to state 103


State 102

   61 elif: KW_ELIF parens braces elif •

    $default  reduce using rule 61 (elif)


State 103

   59 for: KW_FOR '(' opt_stmt ';' opt_stmt ';' opt_stmt • ')' braces

    ')'  shift, and go to state 104


State 104

   18 braces: • '{' block '}'
   59 for: KW_FOR '(' opt_stmt ';' opt_stmt ';' opt_stmt ')' • braces

    '{'  shift, and go to state 46

    braces  go to state 105


State 105

   59 for: KW_FOR '(' opt_stmt ';' opt_stmt ';' opt_stmt ')' braces •

    $default  reduce using rule 59 (for)
