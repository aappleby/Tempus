Grammar

    0 $accept: program $end

    1 program: section
    2        | section program

    3 section: marker expr_block

    4 marker: '#' TOK_IDENT

    5 const: TOK_INT
    6      | TOK_FLOAT
    7      | TOK_STRING

    8 ident: '@' TOK_IDENT
    9      | TOK_IDENT

   10 parens: '(' expr_tuple ')'

   11 braces: '{' expr_block '}'

   12 bracks: '[' expr_tuple ']'

   13 expr_atom: ident
   14          | parens
   15          | braces
   16          | bracks

   17 atom_link: expr_atom
   18          | '.' expr_atom

   19 atom_chain: atom_link
   20           | atom_link atom_chain

   21 affixed_chain: atom_chain
   22              | OP_AFFIX atom_chain
   23              | atom_chain OP_AFFIX

   24 lhs_expr: atom_chain

   25 type_expr: atom_chain

   26 rhs_expr: affixed_chain expr_tail
   27         | const expr_tail

   28 expr_tail: OP_BIN rhs_expr
   29          | ε

   30 full_decl: lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr

   31 empty_decl: lhs_expr OP_TYPE type_expr

   32 assignment: lhs_expr OP_ASSIGN rhs_expr

   33 typed_val: OP_TYPE type_expr OP_ASSIGN rhs_expr

   34 bare_name: lhs_expr OP_TYPE

   35 bare_type: OP_TYPE type_expr

   36 bare_val: OP_ASSIGN rhs_expr

   37 bare_expr: rhs_expr

   38 stmt_if: KW_IF parens braces
   39        | KW_IF parens braces else_chain

   40 else_chain: KW_ELSE braces
   41           | KW_ELSE stmt_if

   42 stmt_case: KW_CASE parens braces

   43 case_block: stmt_case
   44           | stmt_case case_block

   45 stmt_match: KW_MATCH parens '{' case_block '}'

   46 stmt_for: KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces

   47 expr: full_decl
   48     | empty_decl
   49     | assignment
   50     | typed_val
   51     | bare_name
   52     | bare_type
   53     | bare_val
   54     | bare_expr
   55     | stmt_if
   56     | stmt_match
   57     | stmt_for

   58 opt_expr: expr
   59         | ε

   60 expr_block: ε
   61           | expr
   62           | expr ';' expr_block

   63 expr_tuple: ε
   64           | expr
   65           | expr ',' expr_tuple


Terminals, with rules where they appear

    $end (0) 0
    '#' (35) 4
    '(' (40) 10 46
    ')' (41) 10 46
    ',' (44) 65
    '.' (46) 18
    ';' (59) 46 62
    '@' (64) 8
    '[' (91) 12
    ']' (93) 12
    '{' (123) 11 45
    '}' (125) 11 45
    error (256)
    TOK_IDENT <val_str> (258) 4 8 9
    TOK_INT <val_int> (259) 5
    TOK_FLOAT <val_float> (260) 6
    TOK_STRING <val_str> (261) 7
    OP_TYPE <val_str> (262) 30 31 33 34 35
    OP_ASSIGN <val_str> (263) 30 32 33 36
    OP_BIN <val_str> (264) 28
    OP_AFFIX <val_str> (265) 22 23
    KW_IF (266) 38 39
    KW_ELSE (267) 40 41
    KW_MATCH (268) 45
    KW_CASE (269) 42
    KW_FOR (270) 46


Nonterminals, with rules where they appear

    $accept (27)
        on left: 0
    program (28)
        on left: 1 2
        on right: 0 2
    section (29)
        on left: 3
        on right: 1 2
    marker (30)
        on left: 4
        on right: 3
    const (31)
        on left: 5 6 7
        on right: 27
    ident (32)
        on left: 8 9
        on right: 13
    parens (33)
        on left: 10
        on right: 14 38 39 42 45
    braces (34)
        on left: 11
        on right: 15 38 39 40 42 46
    bracks (35)
        on left: 12
        on right: 16
    expr_atom (36)
        on left: 13 14 15 16
        on right: 17 18
    atom_link (37)
        on left: 17 18
        on right: 19 20
    atom_chain (38)
        on left: 19 20
        on right: 20 21 22 23 24 25
    affixed_chain (39)
        on left: 21 22 23
        on right: 26
    lhs_expr (40)
        on left: 24
        on right: 30 31 32 34
    type_expr (41)
        on left: 25
        on right: 30 31 33 35
    rhs_expr (42)
        on left: 26 27
        on right: 28 30 32 33 36 37
    expr_tail (43)
        on left: 28 29
        on right: 26 27
    full_decl (44)
        on left: 30
        on right: 47
    empty_decl (45)
        on left: 31
        on right: 48
    assignment (46)
        on left: 32
        on right: 49
    typed_val (47)
        on left: 33
        on right: 50
    bare_name (48)
        on left: 34
        on right: 51
    bare_type (49)
        on left: 35
        on right: 52
    bare_val (50)
        on left: 36
        on right: 53
    bare_expr (51)
        on left: 37
        on right: 54
    stmt_if (52)
        on left: 38 39
        on right: 41 55
    else_chain (53)
        on left: 40 41
        on right: 39
    stmt_case (54)
        on left: 42
        on right: 43 44
    case_block (55)
        on left: 43 44
        on right: 44 45
    stmt_match (56)
        on left: 45
        on right: 56
    stmt_for (57)
        on left: 46
        on right: 57
    expr (58)
        on left: 47 48 49 50 51 52 53 54 55 56 57
        on right: 58 61 62 64 65
    opt_expr (59)
        on left: 58 59
        on right: 46
    expr_block (60)
        on left: 60 61 62
        on right: 3 11 62
    expr_tuple (61)
        on left: 63 64 65
        on right: 10 12 65


State 0

    0 $accept: • program $end
    1 program: • section
    2        | • section program
    3 section: • marker expr_block
    4 marker: • '#' TOK_IDENT

    '#'  shift, and go to state 1

    program  go to state 2
    section  go to state 3
    marker   go to state 4


State 1

    4 marker: '#' • TOK_IDENT

    TOK_IDENT  shift, and go to state 5


State 2

    0 $accept: program • $end

    $end  shift, and go to state 6


State 3

    1 program: • section
    1        | section •  [$end]
    2        | • section program
    2        | section • program
    3 section: • marker expr_block
    4 marker: • '#' TOK_IDENT

    '#'  shift, and go to state 1

    $default  reduce using rule 1 (program)

    program  go to state 7
    section  go to state 3
    marker   go to state 4


State 4

    3 section: marker • expr_block
    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 affixed_chain: • atom_chain
   22              | • OP_AFFIX atom_chain
   23              | • atom_chain OP_AFFIX
   24 lhs_expr: • atom_chain
   26 rhs_expr: • affixed_chain expr_tail
   27         | • const expr_tail
   30 full_decl: • lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr
   31 empty_decl: • lhs_expr OP_TYPE type_expr
   32 assignment: • lhs_expr OP_ASSIGN rhs_expr
   33 typed_val: • OP_TYPE type_expr OP_ASSIGN rhs_expr
   34 bare_name: • lhs_expr OP_TYPE
   35 bare_type: • OP_TYPE type_expr
   36 bare_val: • OP_ASSIGN rhs_expr
   37 bare_expr: • rhs_expr
   38 stmt_if: • KW_IF parens braces
   39        | • KW_IF parens braces else_chain
   45 stmt_match: • KW_MATCH parens '{' case_block '}'
   46 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces
   47 expr: • full_decl
   48     | • empty_decl
   49     | • assignment
   50     | • typed_val
   51     | • bare_name
   52     | • bare_type
   53     | • bare_val
   54     | • bare_expr
   55     | • stmt_if
   56     | • stmt_match
   57     | • stmt_for
   60 expr_block: ε •  [$end, '#']
   61           | • expr
   62           | • expr ';' expr_block

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22

    $default  reduce using rule 60 (expr_block)

    const          go to state 23
    ident          go to state 24
    parens         go to state 25
    braces         go to state 26
    bracks         go to state 27
    expr_atom      go to state 28
    atom_link      go to state 29
    atom_chain     go to state 30
    affixed_chain  go to state 31
    lhs_expr       go to state 32
    rhs_expr       go to state 33
    full_decl      go to state 34
    empty_decl     go to state 35
    assignment     go to state 36
    typed_val      go to state 37
    bare_name      go to state 38
    bare_type      go to state 39
    bare_val       go to state 40
    bare_expr      go to state 41
    stmt_if        go to state 42
    stmt_match     go to state 43
    stmt_for       go to state 44
    expr           go to state 45
    expr_block     go to state 46


State 5

    4 marker: '#' TOK_IDENT •

    $default  reduce using rule 4 (marker)


State 6

    0 $accept: program $end •

    $default  accept


State 7

    2 program: section program •

    $default  reduce using rule 2 (program)


State 8

    9 ident: TOK_IDENT •

    $default  reduce using rule 9 (ident)


State 9

    5 const: TOK_INT •

    $default  reduce using rule 5 (const)


State 10

    6 const: TOK_FLOAT •

    $default  reduce using rule 6 (const)


State 11

    7 const: TOK_STRING •

    $default  reduce using rule 7 (const)


State 12

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   25 type_expr: • atom_chain
   33 typed_val: OP_TYPE • type_expr OP_ASSIGN rhs_expr
   35 bare_type: OP_TYPE • type_expr

    TOK_IDENT  shift, and go to state 8
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21
    '.'        shift, and go to state 22

    ident       go to state 24
    parens      go to state 25
    braces      go to state 26
    bracks      go to state 27
    expr_atom   go to state 28
    atom_link   go to state 29
    atom_chain  go to state 47
    type_expr   go to state 48


State 13

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 affixed_chain: • atom_chain
   22              | • OP_AFFIX atom_chain
   23              | • atom_chain OP_AFFIX
   26 rhs_expr: • affixed_chain expr_tail
   27         | • const expr_tail
   36 bare_val: OP_ASSIGN • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22

    const          go to state 23
    ident          go to state 24
    parens         go to state 25
    braces         go to state 26
    bracks         go to state 27
    expr_atom      go to state 28
    atom_link      go to state 29
    atom_chain     go to state 49
    affixed_chain  go to state 31
    rhs_expr       go to state 50


State 14

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   22 affixed_chain: OP_AFFIX • atom_chain

    TOK_IDENT  shift, and go to state 8
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21
    '.'        shift, and go to state 22

    ident       go to state 24
    parens      go to state 25
    braces      go to state 26
    bracks      go to state 27
    expr_atom   go to state 28
    atom_link   go to state 29
    atom_chain  go to state 51


State 15

   10 parens: • '(' expr_tuple ')'
   38 stmt_if: KW_IF • parens braces
   39        | KW_IF • parens braces else_chain

    '('  shift, and go to state 19

    parens  go to state 52


State 16

   10 parens: • '(' expr_tuple ')'
   45 stmt_match: KW_MATCH • parens '{' case_block '}'

    '('  shift, and go to state 19

    parens  go to state 53


State 17

   46 stmt_for: KW_FOR • '(' opt_expr ';' opt_expr ';' opt_expr ')' braces

    '('  shift, and go to state 54


State 18

    8 ident: '@' • TOK_IDENT

    TOK_IDENT  shift, and go to state 55


State 19

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   10       | '(' • expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 affixed_chain: • atom_chain
   22              | • OP_AFFIX atom_chain
   23              | • atom_chain OP_AFFIX
   24 lhs_expr: • atom_chain
   26 rhs_expr: • affixed_chain expr_tail
   27         | • const expr_tail
   30 full_decl: • lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr
   31 empty_decl: • lhs_expr OP_TYPE type_expr
   32 assignment: • lhs_expr OP_ASSIGN rhs_expr
   33 typed_val: • OP_TYPE type_expr OP_ASSIGN rhs_expr
   34 bare_name: • lhs_expr OP_TYPE
   35 bare_type: • OP_TYPE type_expr
   36 bare_val: • OP_ASSIGN rhs_expr
   37 bare_expr: • rhs_expr
   38 stmt_if: • KW_IF parens braces
   39        | • KW_IF parens braces else_chain
   45 stmt_match: • KW_MATCH parens '{' case_block '}'
   46 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces
   47 expr: • full_decl
   48     | • empty_decl
   49     | • assignment
   50     | • typed_val
   51     | • bare_name
   52     | • bare_type
   53     | • bare_val
   54     | • bare_expr
   55     | • stmt_if
   56     | • stmt_match
   57     | • stmt_for
   63 expr_tuple: ε •  [')']
   64           | • expr
   65           | • expr ',' expr_tuple

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22

    $default  reduce using rule 63 (expr_tuple)

    const          go to state 23
    ident          go to state 24
    parens         go to state 25
    braces         go to state 26
    bracks         go to state 27
    expr_atom      go to state 28
    atom_link      go to state 29
    atom_chain     go to state 30
    affixed_chain  go to state 31
    lhs_expr       go to state 32
    rhs_expr       go to state 33
    full_decl      go to state 34
    empty_decl     go to state 35
    assignment     go to state 36
    typed_val      go to state 37
    bare_name      go to state 38
    bare_type      go to state 39
    bare_val       go to state 40
    bare_expr      go to state 41
    stmt_if        go to state 42
    stmt_match     go to state 43
    stmt_for       go to state 44
    expr           go to state 56
    expr_tuple     go to state 57


State 20

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   11       | '{' • expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 affixed_chain: • atom_chain
   22              | • OP_AFFIX atom_chain
   23              | • atom_chain OP_AFFIX
   24 lhs_expr: • atom_chain
   26 rhs_expr: • affixed_chain expr_tail
   27         | • const expr_tail
   30 full_decl: • lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr
   31 empty_decl: • lhs_expr OP_TYPE type_expr
   32 assignment: • lhs_expr OP_ASSIGN rhs_expr
   33 typed_val: • OP_TYPE type_expr OP_ASSIGN rhs_expr
   34 bare_name: • lhs_expr OP_TYPE
   35 bare_type: • OP_TYPE type_expr
   36 bare_val: • OP_ASSIGN rhs_expr
   37 bare_expr: • rhs_expr
   38 stmt_if: • KW_IF parens braces
   39        | • KW_IF parens braces else_chain
   45 stmt_match: • KW_MATCH parens '{' case_block '}'
   46 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces
   47 expr: • full_decl
   48     | • empty_decl
   49     | • assignment
   50     | • typed_val
   51     | • bare_name
   52     | • bare_type
   53     | • bare_val
   54     | • bare_expr
   55     | • stmt_if
   56     | • stmt_match
   57     | • stmt_for
   60 expr_block: ε •  ['}']
   61           | • expr
   62           | • expr ';' expr_block

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22

    $default  reduce using rule 60 (expr_block)

    const          go to state 23
    ident          go to state 24
    parens         go to state 25
    braces         go to state 26
    bracks         go to state 27
    expr_atom      go to state 28
    atom_link      go to state 29
    atom_chain     go to state 30
    affixed_chain  go to state 31
    lhs_expr       go to state 32
    rhs_expr       go to state 33
    full_decl      go to state 34
    empty_decl     go to state 35
    assignment     go to state 36
    typed_val      go to state 37
    bare_name      go to state 38
    bare_type      go to state 39
    bare_val       go to state 40
    bare_expr      go to state 41
    stmt_if        go to state 42
    stmt_match     go to state 43
    stmt_for       go to state 44
    expr           go to state 45
    expr_block     go to state 58


State 21

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   12       | '[' • expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 affixed_chain: • atom_chain
   22              | • OP_AFFIX atom_chain
   23              | • atom_chain OP_AFFIX
   24 lhs_expr: • atom_chain
   26 rhs_expr: • affixed_chain expr_tail
   27         | • const expr_tail
   30 full_decl: • lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr
   31 empty_decl: • lhs_expr OP_TYPE type_expr
   32 assignment: • lhs_expr OP_ASSIGN rhs_expr
   33 typed_val: • OP_TYPE type_expr OP_ASSIGN rhs_expr
   34 bare_name: • lhs_expr OP_TYPE
   35 bare_type: • OP_TYPE type_expr
   36 bare_val: • OP_ASSIGN rhs_expr
   37 bare_expr: • rhs_expr
   38 stmt_if: • KW_IF parens braces
   39        | • KW_IF parens braces else_chain
   45 stmt_match: • KW_MATCH parens '{' case_block '}'
   46 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces
   47 expr: • full_decl
   48     | • empty_decl
   49     | • assignment
   50     | • typed_val
   51     | • bare_name
   52     | • bare_type
   53     | • bare_val
   54     | • bare_expr
   55     | • stmt_if
   56     | • stmt_match
   57     | • stmt_for
   63 expr_tuple: ε •  [']']
   64           | • expr
   65           | • expr ',' expr_tuple

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22

    $default  reduce using rule 63 (expr_tuple)

    const          go to state 23
    ident          go to state 24
    parens         go to state 25
    braces         go to state 26
    bracks         go to state 27
    expr_atom      go to state 28
    atom_link      go to state 29
    atom_chain     go to state 30
    affixed_chain  go to state 31
    lhs_expr       go to state 32
    rhs_expr       go to state 33
    full_decl      go to state 34
    empty_decl     go to state 35
    assignment     go to state 36
    typed_val      go to state 37
    bare_name      go to state 38
    bare_type      go to state 39
    bare_val       go to state 40
    bare_expr      go to state 41
    stmt_if        go to state 42
    stmt_match     go to state 43
    stmt_for       go to state 44
    expr           go to state 56
    expr_tuple     go to state 59


State 22

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   18 atom_link: '.' • expr_atom

    TOK_IDENT  shift, and go to state 8
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21

    ident      go to state 24
    parens     go to state 25
    braces     go to state 26
    bracks     go to state 27
    expr_atom  go to state 60


State 23

   27 rhs_expr: const • expr_tail
   28 expr_tail: • OP_BIN rhs_expr
   29          | ε •  [$end, '#', ')', '}', ']', ';', ',']

    OP_BIN  shift, and go to state 61

    $default  reduce using rule 29 (expr_tail)

    expr_tail  go to state 62


State 24

   13 expr_atom: ident •

    $default  reduce using rule 13 (expr_atom)


State 25

   14 expr_atom: parens •

    $default  reduce using rule 14 (expr_atom)


State 26

   15 expr_atom: braces •

    $default  reduce using rule 15 (expr_atom)


State 27

   16 expr_atom: bracks •

    $default  reduce using rule 16 (expr_atom)


State 28

   17 atom_link: expr_atom •

    $default  reduce using rule 17 (atom_link)


State 29

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   19           | atom_link •  [$end, OP_TYPE, OP_ASSIGN, OP_BIN, OP_AFFIX, '#', ')', '}', ']', ';', ',']
   20           | • atom_link atom_chain
   20           | atom_link • atom_chain

    TOK_IDENT  shift, and go to state 8
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21
    '.'        shift, and go to state 22

    $default  reduce using rule 19 (atom_chain)

    ident       go to state 24
    parens      go to state 25
    braces      go to state 26
    bracks      go to state 27
    expr_atom   go to state 28
    atom_link   go to state 29
    atom_chain  go to state 63


State 30

   21 affixed_chain: atom_chain •  [$end, OP_BIN, '#', ')', '}', ']', ';', ',']
   23              | atom_chain • OP_AFFIX
   24 lhs_expr: atom_chain •  [OP_TYPE, OP_ASSIGN]

    OP_AFFIX  shift, and go to state 64

    OP_TYPE    reduce using rule 24 (lhs_expr)
    OP_ASSIGN  reduce using rule 24 (lhs_expr)
    $default   reduce using rule 21 (affixed_chain)


State 31

   26 rhs_expr: affixed_chain • expr_tail
   28 expr_tail: • OP_BIN rhs_expr
   29          | ε •  [$end, '#', ')', '}', ']', ';', ',']

    OP_BIN  shift, and go to state 61

    $default  reduce using rule 29 (expr_tail)

    expr_tail  go to state 65


State 32

   30 full_decl: lhs_expr • OP_TYPE type_expr OP_ASSIGN rhs_expr
   31 empty_decl: lhs_expr • OP_TYPE type_expr
   32 assignment: lhs_expr • OP_ASSIGN rhs_expr
   34 bare_name: lhs_expr • OP_TYPE

    OP_TYPE    shift, and go to state 66
    OP_ASSIGN  shift, and go to state 67


State 33

   37 bare_expr: rhs_expr •

    $default  reduce using rule 37 (bare_expr)


State 34

   47 expr: full_decl •

    $default  reduce using rule 47 (expr)


State 35

   48 expr: empty_decl •

    $default  reduce using rule 48 (expr)


State 36

   49 expr: assignment •

    $default  reduce using rule 49 (expr)


State 37

   50 expr: typed_val •

    $default  reduce using rule 50 (expr)


State 38

   51 expr: bare_name •

    $default  reduce using rule 51 (expr)


State 39

   52 expr: bare_type •

    $default  reduce using rule 52 (expr)


State 40

   53 expr: bare_val •

    $default  reduce using rule 53 (expr)


State 41

   54 expr: bare_expr •

    $default  reduce using rule 54 (expr)


State 42

   55 expr: stmt_if •

    $default  reduce using rule 55 (expr)


State 43

   56 expr: stmt_match •

    $default  reduce using rule 56 (expr)


State 44

   57 expr: stmt_for •

    $default  reduce using rule 57 (expr)


State 45

   61 expr_block: expr •  [$end, '#', '}']
   62           | expr • ';' expr_block

    ';'  shift, and go to state 68

    $default  reduce using rule 61 (expr_block)


State 46

    3 section: marker expr_block •

    $default  reduce using rule 3 (section)


State 47

   25 type_expr: atom_chain •

    $default  reduce using rule 25 (type_expr)


State 48

   33 typed_val: OP_TYPE type_expr • OP_ASSIGN rhs_expr
   35 bare_type: OP_TYPE type_expr •  [$end, '#', ')', '}', ']', ';', ',']

    OP_ASSIGN  shift, and go to state 69

    $default  reduce using rule 35 (bare_type)


State 49

   21 affixed_chain: atom_chain •  [$end, OP_BIN, '#', ')', '}', ']', ';', ',']
   23              | atom_chain • OP_AFFIX

    OP_AFFIX  shift, and go to state 64

    $default  reduce using rule 21 (affixed_chain)


State 50

   36 bare_val: OP_ASSIGN rhs_expr •

    $default  reduce using rule 36 (bare_val)


State 51

   22 affixed_chain: OP_AFFIX atom_chain •

    $default  reduce using rule 22 (affixed_chain)


State 52

   11 braces: • '{' expr_block '}'
   38 stmt_if: KW_IF parens • braces
   39        | KW_IF parens • braces else_chain

    '{'  shift, and go to state 20

    braces  go to state 70


State 53

   45 stmt_match: KW_MATCH parens • '{' case_block '}'

    '{'  shift, and go to state 71


State 54

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 affixed_chain: • atom_chain
   22              | • OP_AFFIX atom_chain
   23              | • atom_chain OP_AFFIX
   24 lhs_expr: • atom_chain
   26 rhs_expr: • affixed_chain expr_tail
   27         | • const expr_tail
   30 full_decl: • lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr
   31 empty_decl: • lhs_expr OP_TYPE type_expr
   32 assignment: • lhs_expr OP_ASSIGN rhs_expr
   33 typed_val: • OP_TYPE type_expr OP_ASSIGN rhs_expr
   34 bare_name: • lhs_expr OP_TYPE
   35 bare_type: • OP_TYPE type_expr
   36 bare_val: • OP_ASSIGN rhs_expr
   37 bare_expr: • rhs_expr
   38 stmt_if: • KW_IF parens braces
   39        | • KW_IF parens braces else_chain
   45 stmt_match: • KW_MATCH parens '{' case_block '}'
   46 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces
   46         | KW_FOR '(' • opt_expr ';' opt_expr ';' opt_expr ')' braces
   47 expr: • full_decl
   48     | • empty_decl
   49     | • assignment
   50     | • typed_val
   51     | • bare_name
   52     | • bare_type
   53     | • bare_val
   54     | • bare_expr
   55     | • stmt_if
   56     | • stmt_match
   57     | • stmt_for
   58 opt_expr: • expr
   59         | ε •  [';']

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22

    $default  reduce using rule 59 (opt_expr)

    const          go to state 23
    ident          go to state 24
    parens         go to state 25
    braces         go to state 26
    bracks         go to state 27
    expr_atom      go to state 28
    atom_link      go to state 29
    atom_chain     go to state 30
    affixed_chain  go to state 31
    lhs_expr       go to state 32
    rhs_expr       go to state 33
    full_decl      go to state 34
    empty_decl     go to state 35
    assignment     go to state 36
    typed_val      go to state 37
    bare_name      go to state 38
    bare_type      go to state 39
    bare_val       go to state 40
    bare_expr      go to state 41
    stmt_if        go to state 42
    stmt_match     go to state 43
    stmt_for       go to state 44
    expr           go to state 72
    opt_expr       go to state 73


State 55

    8 ident: '@' TOK_IDENT •

    $default  reduce using rule 8 (ident)


State 56

   64 expr_tuple: expr •  [')', ']']
   65           | expr • ',' expr_tuple

    ','  shift, and go to state 74

    $default  reduce using rule 64 (expr_tuple)


State 57

   10 parens: '(' expr_tuple • ')'

    ')'  shift, and go to state 75


State 58

   11 braces: '{' expr_block • '}'

    '}'  shift, and go to state 76


State 59

   12 bracks: '[' expr_tuple • ']'

    ']'  shift, and go to state 77


State 60

   18 atom_link: '.' expr_atom •

    $default  reduce using rule 18 (atom_link)


State 61

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 affixed_chain: • atom_chain
   22              | • OP_AFFIX atom_chain
   23              | • atom_chain OP_AFFIX
   26 rhs_expr: • affixed_chain expr_tail
   27         | • const expr_tail
   28 expr_tail: OP_BIN • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22

    const          go to state 23
    ident          go to state 24
    parens         go to state 25
    braces         go to state 26
    bracks         go to state 27
    expr_atom      go to state 28
    atom_link      go to state 29
    atom_chain     go to state 49
    affixed_chain  go to state 31
    rhs_expr       go to state 78


State 62

   27 rhs_expr: const expr_tail •

    $default  reduce using rule 27 (rhs_expr)


State 63

   20 atom_chain: atom_link atom_chain •

    $default  reduce using rule 20 (atom_chain)


State 64

   23 affixed_chain: atom_chain OP_AFFIX •

    $default  reduce using rule 23 (affixed_chain)


State 65

   26 rhs_expr: affixed_chain expr_tail •

    $default  reduce using rule 26 (rhs_expr)


State 66

    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   25 type_expr: • atom_chain
   30 full_decl: lhs_expr OP_TYPE • type_expr OP_ASSIGN rhs_expr
   31 empty_decl: lhs_expr OP_TYPE • type_expr
   34 bare_name: lhs_expr OP_TYPE •  [$end, '#', ')', '}', ']', ';', ',']

    TOK_IDENT  shift, and go to state 8
    '@'        shift, and go to state 18
    '('        shift, and go to state 19
    '{'        shift, and go to state 20
    '['        shift, and go to state 21
    '.'        shift, and go to state 22

    $default  reduce using rule 34 (bare_name)

    ident       go to state 24
    parens      go to state 25
    braces      go to state 26
    bracks      go to state 27
    expr_atom   go to state 28
    atom_link   go to state 29
    atom_chain  go to state 47
    type_expr   go to state 79


State 67

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 affixed_chain: • atom_chain
   22              | • OP_AFFIX atom_chain
   23              | • atom_chain OP_AFFIX
   26 rhs_expr: • affixed_chain expr_tail
   27         | • const expr_tail
   32 assignment: lhs_expr OP_ASSIGN • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22

    const          go to state 23
    ident          go to state 24
    parens         go to state 25
    braces         go to state 26
    bracks         go to state 27
    expr_atom      go to state 28
    atom_link      go to state 29
    atom_chain     go to state 49
    affixed_chain  go to state 31
    rhs_expr       go to state 80


State 68

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 affixed_chain: • atom_chain
   22              | • OP_AFFIX atom_chain
   23              | • atom_chain OP_AFFIX
   24 lhs_expr: • atom_chain
   26 rhs_expr: • affixed_chain expr_tail
   27         | • const expr_tail
   30 full_decl: • lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr
   31 empty_decl: • lhs_expr OP_TYPE type_expr
   32 assignment: • lhs_expr OP_ASSIGN rhs_expr
   33 typed_val: • OP_TYPE type_expr OP_ASSIGN rhs_expr
   34 bare_name: • lhs_expr OP_TYPE
   35 bare_type: • OP_TYPE type_expr
   36 bare_val: • OP_ASSIGN rhs_expr
   37 bare_expr: • rhs_expr
   38 stmt_if: • KW_IF parens braces
   39        | • KW_IF parens braces else_chain
   45 stmt_match: • KW_MATCH parens '{' case_block '}'
   46 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces
   47 expr: • full_decl
   48     | • empty_decl
   49     | • assignment
   50     | • typed_val
   51     | • bare_name
   52     | • bare_type
   53     | • bare_val
   54     | • bare_expr
   55     | • stmt_if
   56     | • stmt_match
   57     | • stmt_for
   60 expr_block: ε •  [$end, '#', '}']
   61           | • expr
   62           | • expr ';' expr_block
   62           | expr ';' • expr_block

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22

    $default  reduce using rule 60 (expr_block)

    const          go to state 23
    ident          go to state 24
    parens         go to state 25
    braces         go to state 26
    bracks         go to state 27
    expr_atom      go to state 28
    atom_link      go to state 29
    atom_chain     go to state 30
    affixed_chain  go to state 31
    lhs_expr       go to state 32
    rhs_expr       go to state 33
    full_decl      go to state 34
    empty_decl     go to state 35
    assignment     go to state 36
    typed_val      go to state 37
    bare_name      go to state 38
    bare_type      go to state 39
    bare_val       go to state 40
    bare_expr      go to state 41
    stmt_if        go to state 42
    stmt_match     go to state 43
    stmt_for       go to state 44
    expr           go to state 45
    expr_block     go to state 81


State 69

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 affixed_chain: • atom_chain
   22              | • OP_AFFIX atom_chain
   23              | • atom_chain OP_AFFIX
   26 rhs_expr: • affixed_chain expr_tail
   27         | • const expr_tail
   33 typed_val: OP_TYPE type_expr OP_ASSIGN • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22

    const          go to state 23
    ident          go to state 24
    parens         go to state 25
    braces         go to state 26
    bracks         go to state 27
    expr_atom      go to state 28
    atom_link      go to state 29
    atom_chain     go to state 49
    affixed_chain  go to state 31
    rhs_expr       go to state 82


State 70

   38 stmt_if: KW_IF parens braces •  [$end, '#', ')', '}', ']', ';', ',']
   39        | KW_IF parens braces • else_chain
   40 else_chain: • KW_ELSE braces
   41           | • KW_ELSE stmt_if

    KW_ELSE  shift, and go to state 83

    $default  reduce using rule 38 (stmt_if)

    else_chain  go to state 84


State 71

   42 stmt_case: • KW_CASE parens braces
   43 case_block: • stmt_case
   44           | • stmt_case case_block
   45 stmt_match: KW_MATCH parens '{' • case_block '}'

    KW_CASE  shift, and go to state 85

    stmt_case   go to state 86
    case_block  go to state 87


State 72

   58 opt_expr: expr •

    $default  reduce using rule 58 (opt_expr)


State 73

   46 stmt_for: KW_FOR '(' opt_expr • ';' opt_expr ';' opt_expr ')' braces

    ';'  shift, and go to state 88


State 74

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 affixed_chain: • atom_chain
   22              | • OP_AFFIX atom_chain
   23              | • atom_chain OP_AFFIX
   24 lhs_expr: • atom_chain
   26 rhs_expr: • affixed_chain expr_tail
   27         | • const expr_tail
   30 full_decl: • lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr
   31 empty_decl: • lhs_expr OP_TYPE type_expr
   32 assignment: • lhs_expr OP_ASSIGN rhs_expr
   33 typed_val: • OP_TYPE type_expr OP_ASSIGN rhs_expr
   34 bare_name: • lhs_expr OP_TYPE
   35 bare_type: • OP_TYPE type_expr
   36 bare_val: • OP_ASSIGN rhs_expr
   37 bare_expr: • rhs_expr
   38 stmt_if: • KW_IF parens braces
   39        | • KW_IF parens braces else_chain
   45 stmt_match: • KW_MATCH parens '{' case_block '}'
   46 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces
   47 expr: • full_decl
   48     | • empty_decl
   49     | • assignment
   50     | • typed_val
   51     | • bare_name
   52     | • bare_type
   53     | • bare_val
   54     | • bare_expr
   55     | • stmt_if
   56     | • stmt_match
   57     | • stmt_for
   63 expr_tuple: ε •  [')', ']']
   64           | • expr
   65           | • expr ',' expr_tuple
   65           | expr ',' • expr_tuple

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22

    $default  reduce using rule 63 (expr_tuple)

    const          go to state 23
    ident          go to state 24
    parens         go to state 25
    braces         go to state 26
    bracks         go to state 27
    expr_atom      go to state 28
    atom_link      go to state 29
    atom_chain     go to state 30
    affixed_chain  go to state 31
    lhs_expr       go to state 32
    rhs_expr       go to state 33
    full_decl      go to state 34
    empty_decl     go to state 35
    assignment     go to state 36
    typed_val      go to state 37
    bare_name      go to state 38
    bare_type      go to state 39
    bare_val       go to state 40
    bare_expr      go to state 41
    stmt_if        go to state 42
    stmt_match     go to state 43
    stmt_for       go to state 44
    expr           go to state 56
    expr_tuple     go to state 89


State 75

   10 parens: '(' expr_tuple ')' •

    $default  reduce using rule 10 (parens)


State 76

   11 braces: '{' expr_block '}' •

    $default  reduce using rule 11 (braces)


State 77

   12 bracks: '[' expr_tuple ']' •

    $default  reduce using rule 12 (bracks)


State 78

   28 expr_tail: OP_BIN rhs_expr •

    $default  reduce using rule 28 (expr_tail)


State 79

   30 full_decl: lhs_expr OP_TYPE type_expr • OP_ASSIGN rhs_expr
   31 empty_decl: lhs_expr OP_TYPE type_expr •  [$end, '#', ')', '}', ']', ';', ',']

    OP_ASSIGN  shift, and go to state 90

    $default  reduce using rule 31 (empty_decl)


State 80

   32 assignment: lhs_expr OP_ASSIGN rhs_expr •

    $default  reduce using rule 32 (assignment)


State 81

   62 expr_block: expr ';' expr_block •

    $default  reduce using rule 62 (expr_block)


State 82

   33 typed_val: OP_TYPE type_expr OP_ASSIGN rhs_expr •

    $default  reduce using rule 33 (typed_val)


State 83

   11 braces: • '{' expr_block '}'
   38 stmt_if: • KW_IF parens braces
   39        | • KW_IF parens braces else_chain
   40 else_chain: KW_ELSE • braces
   41           | KW_ELSE • stmt_if

    KW_IF  shift, and go to state 15
    '{'    shift, and go to state 20

    braces   go to state 91
    stmt_if  go to state 92


State 84

   39 stmt_if: KW_IF parens braces else_chain •

    $default  reduce using rule 39 (stmt_if)


State 85

   10 parens: • '(' expr_tuple ')'
   42 stmt_case: KW_CASE • parens braces

    '('  shift, and go to state 19

    parens  go to state 93


State 86

   42 stmt_case: • KW_CASE parens braces
   43 case_block: • stmt_case
   43           | stmt_case •  ['}']
   44           | • stmt_case case_block
   44           | stmt_case • case_block

    KW_CASE  shift, and go to state 85

    $default  reduce using rule 43 (case_block)

    stmt_case   go to state 86
    case_block  go to state 94


State 87

   45 stmt_match: KW_MATCH parens '{' case_block • '}'

    '}'  shift, and go to state 95


State 88

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 affixed_chain: • atom_chain
   22              | • OP_AFFIX atom_chain
   23              | • atom_chain OP_AFFIX
   24 lhs_expr: • atom_chain
   26 rhs_expr: • affixed_chain expr_tail
   27         | • const expr_tail
   30 full_decl: • lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr
   31 empty_decl: • lhs_expr OP_TYPE type_expr
   32 assignment: • lhs_expr OP_ASSIGN rhs_expr
   33 typed_val: • OP_TYPE type_expr OP_ASSIGN rhs_expr
   34 bare_name: • lhs_expr OP_TYPE
   35 bare_type: • OP_TYPE type_expr
   36 bare_val: • OP_ASSIGN rhs_expr
   37 bare_expr: • rhs_expr
   38 stmt_if: • KW_IF parens braces
   39        | • KW_IF parens braces else_chain
   45 stmt_match: • KW_MATCH parens '{' case_block '}'
   46 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces
   46         | KW_FOR '(' opt_expr ';' • opt_expr ';' opt_expr ')' braces
   47 expr: • full_decl
   48     | • empty_decl
   49     | • assignment
   50     | • typed_val
   51     | • bare_name
   52     | • bare_type
   53     | • bare_val
   54     | • bare_expr
   55     | • stmt_if
   56     | • stmt_match
   57     | • stmt_for
   58 opt_expr: • expr
   59         | ε •  [';']

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22

    $default  reduce using rule 59 (opt_expr)

    const          go to state 23
    ident          go to state 24
    parens         go to state 25
    braces         go to state 26
    bracks         go to state 27
    expr_atom      go to state 28
    atom_link      go to state 29
    atom_chain     go to state 30
    affixed_chain  go to state 31
    lhs_expr       go to state 32
    rhs_expr       go to state 33
    full_decl      go to state 34
    empty_decl     go to state 35
    assignment     go to state 36
    typed_val      go to state 37
    bare_name      go to state 38
    bare_type      go to state 39
    bare_val       go to state 40
    bare_expr      go to state 41
    stmt_if        go to state 42
    stmt_match     go to state 43
    stmt_for       go to state 44
    expr           go to state 72
    opt_expr       go to state 96


State 89

   65 expr_tuple: expr ',' expr_tuple •

    $default  reduce using rule 65 (expr_tuple)


State 90

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 affixed_chain: • atom_chain
   22              | • OP_AFFIX atom_chain
   23              | • atom_chain OP_AFFIX
   26 rhs_expr: • affixed_chain expr_tail
   27         | • const expr_tail
   30 full_decl: lhs_expr OP_TYPE type_expr OP_ASSIGN • rhs_expr

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_AFFIX    shift, and go to state 14
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22

    const          go to state 23
    ident          go to state 24
    parens         go to state 25
    braces         go to state 26
    bracks         go to state 27
    expr_atom      go to state 28
    atom_link      go to state 29
    atom_chain     go to state 49
    affixed_chain  go to state 31
    rhs_expr       go to state 97


State 91

   40 else_chain: KW_ELSE braces •

    $default  reduce using rule 40 (else_chain)


State 92

   41 else_chain: KW_ELSE stmt_if •

    $default  reduce using rule 41 (else_chain)


State 93

   11 braces: • '{' expr_block '}'
   42 stmt_case: KW_CASE parens • braces

    '{'  shift, and go to state 20

    braces  go to state 98


State 94

   44 case_block: stmt_case case_block •

    $default  reduce using rule 44 (case_block)


State 95

   45 stmt_match: KW_MATCH parens '{' case_block '}' •

    $default  reduce using rule 45 (stmt_match)


State 96

   46 stmt_for: KW_FOR '(' opt_expr ';' opt_expr • ';' opt_expr ')' braces

    ';'  shift, and go to state 99


State 97

   30 full_decl: lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr •

    $default  reduce using rule 30 (full_decl)


State 98

   42 stmt_case: KW_CASE parens braces •

    $default  reduce using rule 42 (stmt_case)


State 99

    5 const: • TOK_INT
    6      | • TOK_FLOAT
    7      | • TOK_STRING
    8 ident: • '@' TOK_IDENT
    9      | • TOK_IDENT
   10 parens: • '(' expr_tuple ')'
   11 braces: • '{' expr_block '}'
   12 bracks: • '[' expr_tuple ']'
   13 expr_atom: • ident
   14          | • parens
   15          | • braces
   16          | • bracks
   17 atom_link: • expr_atom
   18          | • '.' expr_atom
   19 atom_chain: • atom_link
   20           | • atom_link atom_chain
   21 affixed_chain: • atom_chain
   22              | • OP_AFFIX atom_chain
   23              | • atom_chain OP_AFFIX
   24 lhs_expr: • atom_chain
   26 rhs_expr: • affixed_chain expr_tail
   27         | • const expr_tail
   30 full_decl: • lhs_expr OP_TYPE type_expr OP_ASSIGN rhs_expr
   31 empty_decl: • lhs_expr OP_TYPE type_expr
   32 assignment: • lhs_expr OP_ASSIGN rhs_expr
   33 typed_val: • OP_TYPE type_expr OP_ASSIGN rhs_expr
   34 bare_name: • lhs_expr OP_TYPE
   35 bare_type: • OP_TYPE type_expr
   36 bare_val: • OP_ASSIGN rhs_expr
   37 bare_expr: • rhs_expr
   38 stmt_if: • KW_IF parens braces
   39        | • KW_IF parens braces else_chain
   45 stmt_match: • KW_MATCH parens '{' case_block '}'
   46 stmt_for: • KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces
   46         | KW_FOR '(' opt_expr ';' opt_expr ';' • opt_expr ')' braces
   47 expr: • full_decl
   48     | • empty_decl
   49     | • assignment
   50     | • typed_val
   51     | • bare_name
   52     | • bare_type
   53     | • bare_val
   54     | • bare_expr
   55     | • stmt_if
   56     | • stmt_match
   57     | • stmt_for
   58 opt_expr: • expr
   59         | ε •  [')']

    TOK_IDENT   shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_FLOAT   shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    OP_TYPE     shift, and go to state 12
    OP_ASSIGN   shift, and go to state 13
    OP_AFFIX    shift, and go to state 14
    KW_IF       shift, and go to state 15
    KW_MATCH    shift, and go to state 16
    KW_FOR      shift, and go to state 17
    '@'         shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 20
    '['         shift, and go to state 21
    '.'         shift, and go to state 22

    $default  reduce using rule 59 (opt_expr)

    const          go to state 23
    ident          go to state 24
    parens         go to state 25
    braces         go to state 26
    bracks         go to state 27
    expr_atom      go to state 28
    atom_link      go to state 29
    atom_chain     go to state 30
    affixed_chain  go to state 31
    lhs_expr       go to state 32
    rhs_expr       go to state 33
    full_decl      go to state 34
    empty_decl     go to state 35
    assignment     go to state 36
    typed_val      go to state 37
    bare_name      go to state 38
    bare_type      go to state 39
    bare_val       go to state 40
    bare_expr      go to state 41
    stmt_if        go to state 42
    stmt_match     go to state 43
    stmt_for       go to state 44
    expr           go to state 72
    opt_expr       go to state 100


State 100

   46 stmt_for: KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr • ')' braces

    ')'  shift, and go to state 101


State 101

   11 braces: • '{' expr_block '}'
   46 stmt_for: KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' • braces

    '{'  shift, and go to state 20

    braces  go to state 102


State 102

   46 stmt_for: KW_FOR '(' opt_expr ';' opt_expr ';' opt_expr ')' braces •

    $default  reduce using rule 46 (stmt_for)
